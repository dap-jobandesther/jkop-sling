
/*
 * This file is part of Jkop
 * Copyright (c) 2016 Job and Esther Technologies, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

class is File abstract:

func entry(name as string) virtual abstract as File
func entries virtual abstract as Iterator<File>
func move(dest as File, replace as bool) virtual abstract as bool
func rename(newname as string, replace as bool) virtual abstract as bool
func touch virtual abstract as bool
func read virtual abstract as FileReader
func write virtual abstract as FileWriter
func append virtual abstract as FileWriter
func stat virtual abstract as FileInfo
func exists virtual abstract as bool
func isExecutable virtual abstract as bool
func createFifo virtual abstract as bool
func createDirectory virtual abstract as bool
func createDirectoryRecursive() virtual abstract as bool
func removeDirectory virtual abstract as bool
func getPath virtual abstract as string
func remove() virtual abstract as bool
func compareModificationTime(bf as File) virtual abstract as int
func directoryName virtual abstract as string
func isIdentical(file as File) virtual abstract as bool
// FIXME #public #virtual #abstract Iterator lines()
func makeExecutable virtual abstract as bool
func isNewerThan(bf as File) virtual abstract as bool
func isOlderThan(bf as File) virtual abstract as bool
func writeFromReader(reader as Reader, append as bool) virtual abstract as bool

// Common default implementations

func isSame(file as File) virtual as bool
{
	if(file == null) {
		return(false)
	}
	var path = getPath()
	if(path != null && path == file.getPath()) {
		return(true)
	}
	return(false)
}

func removeRecursive virtual as bool
{
	var finfo = stat()
	if(finfo == null) {
		return(true)
	}
	if(finfo.isDirectory() == false || finfo.isLink() == true) {
		return(remove())
	}
	var it = entries()
	while(it != null) {
		var f = it.next()
		if(f == null) {
			break
		}
		if(f.removeRecursive() == false) {
			return(false)
		}
	}
	return(removeDirectory())
}

func isFile virtual as bool
{
	var st = stat()
	if(st == null) {
		return(false)
	}
	return(st.isFile())
}

func isDirectory virtual as bool
{
	var st = stat()
	if(st == null) {
		return(false)
	}
	return(st.isDirectory())
}

func isLink virtual as bool
{
	var st = stat()
	if(st == null) {
		return(false)
	}
	return(st.isLink())
}

func getSize virtual as int
{
	var st = stat()
	if(st == null) {
		return(0)
	}
	return(st.getSize())
}

func setMode(mode as int) virtual as bool
{
	return(false)
}

func setOwnerUser(uid as int) virtual as bool
{
	return(false)
}

func setOwnerGroup(gid as int) virtual as bool
{
	return(false)
}

func asExecutable virtual as File
{
	if(OS.isWindows()) {
		if(hasExtension("exe") == false && hasExtension("bat") == false && hasExtension("com") == false) {
			var bn = baseName()
			var exe = getSibling(bn .. ".exe")
			if(exe.isFile()) {
				return(exe)
			}
			var bat = getSibling(bn .. ".bat")
			if(bat.isFile()) {
				return(bat)
			}
			var com = getSibling(bn .. ".com")
			if(com.isFile()) {
				return(com)
			}
			return(exe)
		}
	}
	return(this)
}

func getParent virtual as File
{
	var path = dirName()
	if(path == null) {
		return(new FileInvalid())
	}
	return(FileInstance.forPath(path))
}

func getSibling(name as string) virtual as File
{
	var pp = getParent()
	if(pp == null) {
		return(null)
	}
	return(pp.entry(name))
}

func hasExtension(ext as string) virtual as bool
{
	var xx = extension()
	if(xx == null) {
		return(false)
	}
	return(String.equalsIgnoreCase(xx, ext))
}

func extension virtual as string
{
	var bn = baseName()
	if(bn == null) {
		return(null)
	}
	var dot = String.lastIndexOf(bn, '.')
	if(dot < 0) {
		return(null)
	}
	return(String.subString(bn, dot+1))
}

func baseNameWithoutExtension virtual as string
{
	var bn = baseName()
	if(bn == null) {
		return(null)
	}
	var dot = String.lastIndexOf(bn, '.')
	if(dot < 0) {
		return(bn)
	}
	return(String.subString(bn, 0, dot))
}

func dirName virtual as string
{
	var path = getPath()
	if(path == null) {
		return(null)
	}
	var delim = Environment.getPathSeparator()
	var dp = String.lastIndexOf(path, delim)
	if(dp < 0) {
		return(".")
	}
	return(String.subString(path, 0, dp))
}

func baseName virtual as string
{
	var path = getPath()
	if(path == null) {
		return(null)
	}
	var delim = Environment.getPathSeparator()
	var dp = String.lastIndexOf(path, delim)
	if(dp < 0) {
		return(path)
	}
	return(String.subString(path, dp+1))
}

func copyFileTo(dest as File) as bool
{
	if(dest == null) {
		return(false)
	}
	if(this.isSame(dest)) {
		return(true)
	}
	var buf = MALLOC(4096 * 4)
	if(buf == null) {
		return(false)
	}
	var reader = this.read()
	if(reader == null) {
		return(false)
	}
	var writer = dest.write()
	if(writer == null) {
		if(reader is Closable) {
			(reader as! Closable).close()
		}
		return(false)
	}
	var v = true
	var n = 0
	while((n = reader.read(buf)) > 0) {
		var nr = writer.write(buf, n)
		if(nr != n) {
			v = false
			break
		}
	}
	if(v) {
		var fi = this.stat()
		if(fi != null) {
			var mode = fi.getMode()
			if(mode != 0) {
				dest.setMode(mode)
			}
		}
	}
	else {
		dest.remove()
	}
	if(reader != null && reader is Closable) {
		(reader as! Closable).close()
	}
	if(writer != null && writer is Closable) {
		(writer as! Closable).close()
	}
	return(v)
}

func setContentsString(str as string, encoding as string) virtual as bool
{
	if(String.isEmpty(encoding)) {
		return(false)
	}
	return(setContentsBuffer(String.toBuffer(str, encoding)))
}

func setContentsBuffer(buffer as buffer) virtual as bool
{
	if(buffer == null) {
		return(false)
	}
	var writer = write()
	if(writer == null) {
		return(false)
	}
	if(writer.write(buffer, SIZE(buffer)) < 0) {
		return(false)
	}
	writer.close()
	return(true)
}

func getContentsString(encoding as string) virtual as string
{
	if(String.isEmpty(encoding)) {
		return(null)
	}
	return(String.forBuffer(getContentsBuffer(), encoding))
}

func getContentsBuffer virtual as buffer
{
	var reader = read()
	if(reader == null) {
		return(null)
	}
	var sz = reader.getSize()
	var b = MALLOC(sz)
	if(reader.read(b) < sz) {
		return(null)
	}
	reader.close()
	return(b)
}
