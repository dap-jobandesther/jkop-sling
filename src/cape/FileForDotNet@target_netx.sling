
/*
 * This file is part of Jkop
 * Copyright (c) 2016 Job and Esther Technologies, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

class is FileAdapter private:

class MyFileReader is DotNetStreamReader
{
	func initialize(file as string) as bool
	{
		if(file == null) {
			return(false)
		}
		var v = true
		lang "cs" {{{
			try {
				setStream(System.IO.File.OpenRead(file));
			}
			catch(System.Exception e) {
				// System.Console.WriteLine(e.ToString());
				setStream(null);
				v = false;
			}
		}}}
		return(v)
	}
}

class MyFileWriter is FileWriter is DotNetStreamWriter
{
	prop append as bool

	func initialize(file as string) as bool
	{
		if(file == null) {
			return(false)
		}
		var v = true
		lang "cs" {{{
			try {
				if(append) {
					setStream(System.IO.File.Open(file, System.IO.FileMode.Append));
				}
				else {
					setStream(System.IO.File.Open(file, System.IO.FileMode.Create));
				}
			}
			catch(System.Exception e) {
				// System.Console.WriteLine(e.ToString());
				setStream(null);
				v = false;
			}
		}}}
		return(v)
	}
}

func forPath(path as string) static as File
{
	return(new this(path))
}

var completePath as string

ctor
{
}

ctor(path as string)
{
	setCompletePath(path)
}

func setCompletePath(v as string)
{
	lang "cs"
	{{{
		var x = v;
		if(x == null || x.Length < 1) {
			completePath = null;
		}
		else {
			string delim = new System.String(System.IO.Path.DirectorySeparatorChar, 1);
			while(x.EndsWith(delim) && x.Length > 1) {
				x = x.Substring(0, x.Length-1);
			}
			completePath = System.IO.Path.GetFullPath(x);
		}
	}}}
}

func entry(name as string) override as File
{
	if(completePath == null) {
		return(this)
	}
	if(name == null || String.getLength(name) < 1) {
		return(this)
	}
	return(new this(lang "cs" string {{{ System.IO.Path.Combine(completePath, name) }}}))
}

func getParent override as File
{
	var v as string
	lang "cs" {{{
		if(completePath != null) {
			var di = System.IO.Directory.GetParent(completePath);
			if(di != null) {
				v = di.FullName;
			}
		}
		if(v == null) {
			v = completePath;
		}
	}}}
	return(new this(v))
}

class MyIterator is Iterator<File>
{
	prop completePath as string

	lang "cs"
	{{{
		public System.Collections.IEnumerator it;
	}}}

	func next() as File
	{
		var str as string
		lang "cs"
		{{{
			try {
				if(it == null) {
					return(null);
				}
				if(it.MoveNext() == false) {
					return(null);
				}
				str = it.Current as string;
				if(str == null) {
					return(null);
				}
				str = System.IO.Path.Combine(completePath, str);
			}
			catch(System.Exception e) {
				return(null);
			}
		}}}
		var v = new parent()
		v.setCompletePath(str)
		return(v)
	}
}

func entries override as Iterator<File>
{
	if(completePath == null) {
		return(null)
	}
	var v = new MyIterator()
	v.setCompletePath(completePath)
	lang "cs" {{{
		try {
			System.Collections.IEnumerable cc = System.IO.Directory.EnumerateFileSystemEntries(completePath);
			v.it = cc.GetEnumerator();
		}
		catch(System.Exception e) {
		}
	}}}
	return(v)
}

func move(dest as File, replace as bool = true) override as bool
{
	if(dest == null) {
		return(false)
	}
	if(dest.exists()) {
		if(replace == false) {
			return(false)
		}
		dest.remove()
	}
	var destf = dest as this
	if(destf == null) {
		return(false)
	}
	var v = true
	lang "cs"
	{{{
		try {
			System.IO.File.Move(completePath, destf.completePath);
		}
		catch(System.Exception e) {
			// System.Console.WriteLine(e.ToString());
			v = false;
		}
	}}}
	return(v)
}

func rename(newname as string, replacee as bool = true) override stub as bool // FIXME

func touch override as bool
{
	if(completePath == null) {
		return(false)
	}
	var v = true
	lang "cs"
	{{{
		try {
			var fi = new System.IO.FileInfo(completePath);
			if(fi.Exists) {
				System.IO.File.SetLastWriteTime(completePath, System.DateTime.Now);
			}
			else {
				System.IO.File.Create(completePath).Dispose();
			}
		}
		catch(System.Exception e) {
			// System.Console.WriteLine(e.ToString());
			v = false;
		}
	}}}
	return(v)
}

func getMyReader private as MyFileReader
{
	var v = new MyFileReader()
	if(v.initialize(completePath) == false) {
		return(null)
	}
	return(v)
}

func read override as FileReader
{
	return(getMyReader())
}

func write override as FileWriter
{
	var v = new MyFileWriter()
	lang "cs"
	{{{
		if(v.initialize(completePath) == false) {
			v = null;
		}
	}}}
	return(v)
}

func append override as FileWriter
{
	var v = new MyFileWriter()
	v.setAppend(true)
	lang "cs"
	{{{
		if(v.initialize(completePath) == false) {
			v = null;
		}
	}}}
	return(v)
}

func makeExecutable override as bool
{
	var v = true
	lang "cs"
	{{{
		if(System.Type.GetType("Mono.Runtime") != null) {
			try {
				System.IO.File.SetAttributes(completePath, (System.IO.FileAttributes)((int)System.IO.File.GetAttributes(completePath) | 0x80000000));
			}
			catch(System.Exception e) {
				v = false;
			}
		}
	}}}
	return(v)
}

func stat override as FileInfo
{
	var v = new FileInfo()
	v.setFile(this)
	v.setOwnerUser(0)
	v.setOwnerGroup(0)
	v.setMode(0)
	v.setExecutable(true)
	v.setLink(false)
	v.setType(FileInfo.FILE_TYPE_UNKNOWN)
	if(completePath != null) {
		lang "cs"
		{{{
			try {
				var attrs = System.IO.File.GetAttributes(completePath);
				if(attrs.HasFlag(System.IO.FileAttributes.Directory)) {
					v.setType(FileInfo.FILE_TYPE_DIR);
				}
				else {
					v.setType(FileInfo.FILE_TYPE_FILE);
				}
			}
			catch(System.Exception e) {
			}
		}}}
		if(v.getType() == FileInfo.FILE_TYPE_FILE) {
			lang "cs"
			{{{
				try {
					var dnfi = new System.IO.FileInfo(completePath);
					v.setSize((int)dnfi.Length);
					v.setAccessTime((int)dnfi.LastAccessTime.Subtract(new System.DateTime(1970, 1, 1)).TotalSeconds);
					v.setModifyTime((int)dnfi.LastWriteTime.Subtract(new System.DateTime(1970, 1, 1)).TotalSeconds);
				}
				catch(System.Exception e) {
				}
			}}}
		}
	}
	return(v)
}

func exists override as bool
{
	var fi = stat()
	return(fi.getType() != FileInfo.FILE_TYPE_UNKNOWN)
}

func isExecutable override stub as bool // FIXME
func createFifo override stub as bool // FIXME

func createDirectory override as bool
{
	var v = false
	lang "cs"
	{{{
		try {
			System.IO.Directory.CreateDirectory(completePath);
			v = true;
		}
		catch(System.Exception e) {
			// System.Console.WriteLine(e.ToString());
			v = false;
		}
	}}}
	return(v)
}

func createDirectoryRecursive override as bool
{
	return(createDirectory())
}

func remove override as bool
{
	var v = true
	lang "cs"
	{{{
		try {
			System.IO.File.Delete(completePath);
		}
		catch(System.IO.DirectoryNotFoundException e) {
			v = false;
		}
		catch(System.IO.FileNotFoundException e) {
			v = false;
		}
		catch(System.Exception e) {
			// System.Console.WriteLine(e.ToString());
			v = false;
		}
	}}}
	return(v)
}

func removeDirectory override as bool
{
	var v = true
	lang "cs"
	{{{
		try {
			System.IO.Directory.Delete(completePath);
		}
		catch(System.IO.DirectoryNotFoundException e) {
			v = false;
		}
		catch(System.IO.FileNotFoundException e) {
			v = false;
		}
		catch(System.Exception e) {
			// System.Console.WriteLine(e.ToString());
			v = false;
		}
	}}}
	return(v)
}

func getPath override as string
{
	return(completePath)
}

func compareModificationTime(bf as File) override stub as int // FIXME
func directoryName override stub as string // FIXME

func baseName override as string
{
	var path = completePath
	if(path == null) {
		return(null)
	}
	var rs = String.lastIndexOf(path, lang "cs" char {{{ System.IO.Path.DirectorySeparatorChar }}})
	if(rs < 0) {
		return(path)
	}
	return(String.subString(path, rs+1))
}

func isIdentical(file as File) override stub as bool // FIXME

func getContentsBuffer override as buffer
{
	if(completePath == null) {
		return(null)
	}
	return(lang "cs" buffer {{{ System.IO.File.ReadAllBytes(completePath) }}})
}

func getContentsString(encoding as string) override as string
{
	if(completePath == null) {
		return(null)
	}
	var v as string
	if(encoding == null) {
		lang "cs" {{{
			try {
				v = System.IO.File.ReadAllText(completePath);
			}
			catch(System.Exception e) {
				v = null;
			}
		}}}
	}
	else if(encoding == "UTF-8") {
		lang "cs" {{{
			try {
				v = System.IO.File.ReadAllText(completePath, System.Text.Encoding.UTF8);
			}
			catch(System.Exception e) {
				v = null;
			}
		}}}
	}
	else if(encoding == "ASCII") {
		lang "cs" {{{
			try {
				v = System.IO.File.ReadAllText(completePath, System.Text.Encoding.ASCII);
			}
			catch(System.Exception e) {
				v = null;
			}
		}}}
	}
	else if(encoding == "UCS2") {
		lang "cs" {{{
			try {
				v = System.IO.File.ReadAllText(completePath, System.Text.Encoding.Unicode);
			}
			catch(System.Exception e) {
				v = null;
			}
		}}}
	}
	else if(encoding == "UTF-7") {
		lang "cs" {{{
			try {
				v = System.IO.File.ReadAllText(completePath, System.Text.Encoding.UTF7);
			}
			catch(System.Exception e) {
				v = null;
			}
		}}}
	}
	else if(encoding == "UTF-32") {
		lang "cs" {{{
			try {
				v = System.IO.File.ReadAllText(completePath, System.Text.Encoding.UTF32);
			}
			catch(System.Exception e) {
				v = null;
			}
		}}}
	}
	else {
		lang "cs" {{{
			try {
				v = System.IO.File.ReadAllText(completePath);
			}
			catch(System.Exception e) {
				v = null;
			}
		}}}
	}
	return(v)
}

func setContentsBuffer(buf as buffer) override as bool
{
	if(buf == null) {
		return(false)
	}
	lang "cs"
	{{{
		try {
			System.IO.File.WriteAllBytes(completePath, buf);
		}
		catch(System.Exception e) {
			return(false);
		}
	}}}
	return(true)
}

func isNewerThan(bf as File) override stub as bool
func isOlderThan(bf as File) override stub as bool
func writeFromReader(reader as Reader, append as bool = false) override stub as bool

func setContentsString(str as string, encoding as string) override as bool
{
	if(str == null) {
		return(false)
	}
	lang "cs"
	{{{
		System.Text.Encoding ee;
		if(encoding == null || encoding.Equals("UTF-8") || encoding.Equals("UTF8")) {
			ee = new System.Text.UTF8Encoding(false);
		}
		else if(encoding.Equals("ASCII")) {
			ee = System.Text.Encoding.ASCII;
		}
		else if(encoding.Equals("UCS-2") || encoding.Equals("UCS2")) {
			ee = new System.Text.UnicodeEncoding(false, false);
		}
		else {
			return(false);
		}
		try {
			System.IO.File.WriteAllText(completePath, str, ee);
		}
		catch(System.Exception e) {
			return(false);
		}
	}}}
	return(true)
}
