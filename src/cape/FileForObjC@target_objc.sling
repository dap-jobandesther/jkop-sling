
/*
 * This file is part of Jkop
 * Copyright (c) 2016 Job and Esther Technologies, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

class is FileAdapter private:

class MyReader is FileReader is Reader is SizedReader is Closable is SeekableReader
{
	prop handle as !"NSFileHandle*"
	prop size as int

	func close
	{
		if(handle == null) {
			return
		}
		lang "objc" {{{
			[handle closeFile];
		}}}
		handle = null
	}

	func setCurrentPosition(n as int64) as bool
	{
		if(handle == null) {
			return(false)
		}
		var v = true
		lang "objc" {{{
			@try {
				[handle seekToFileOffset:n];
			}
			@catch(NSException* e) {
				v = false;
			}
		}}}
		return(v)
	}

	func getCurrentPosition as int64
	{
		if(handle == null) {
			return(0)
		}
		var v as int64 = 0
		lang "objc" {{{
			@try {
				v = [handle offsetInFile];
			}
			@catch(NSException* e) {
				v = 0;
			}
		}}}
		return(v)
	}

	func read(buf as buffer, maxBytes as int) as int
	{
		if(buf == null || handle == null) {
			return(0)
		}
		var data as buffer
		var mx = maxBytes
		if(mx < 1) {
			mx = lang "objc" int {{{ [buf length] }}}
		}
		lang "objc" {{{
			data = [handle readDataOfLength:mx];
		}}}
		if(data == null) {
			return(0)
		}
		var dlen = lang "objc" int {{{ [data length] }}}
		if(dlen < 1) {
			return(0)
		}
		lang "objc" {{{
			[buf setData:data];
		}}}
		return(dlen)
	}

	func readAll as buffer
	{
		return(lang "objc" buffer {{{ [handle readDataToEndOfFile] }}})
	}
}

func forPath(path as string) static as File
{
	return(new this(path))
}

var path as string
var manager as !"NSFileManager*"

ctor(path as string)
{
	this.path = lang "objc" string {{{ [path stringByStandardizingPath] }}}
	lang "objc" {{{
		manager = [NSFileManager defaultManager];
	}}}
}

func entry(name as string) override as File
{
	return(new this(path .. "/" .. name))
}

// FIXME func Iterator entries virtual stub as Iterator
func move(dest as File, replace as bool = true) override stub as bool
func rename(newname as string, replace as bool = true) override stub as bool
func touch override stub as bool
func write override stub as FileWriter
func append override stub as FileWriter
func setMode(mode as int) override stub as bool
func setOwnerUser(uid as int) override stub as bool
func setOwnerGroup(gid as int) override stub as bool
func makeExecutable override stub as bool

func stat override as FileInfo
{
	var v = new FileInfo()
	v.setFile(this)
	var dict as !"NSDictionary*"
	lang "objc" {{{
		dict = [manager attributesOfItemAtPath:path error:nil];
		[v setSize:[[dict objectForKey:NSFileSize] integerValue]];
		[v setCreateTime:[[dict objectForKey:NSFileCreationDate] timeIntervalSince1970]];
		[v setAccessTime:0];
		[v setModifyTime:[[dict objectForKey:NSFileModificationDate] timeIntervalSince1970]];
		[v setOwnerUser:[[dict objectForKey:NSFileOwnerAccountID] integerValue]];
		[v setOwnerGroup:[[dict objectForKey:NSFileGroupOwnerAccountID] integerValue]];
		[v setMode:0];
		if([manager isExecutableFileAtPath:path]) {
			[v setExecutable:YES];
		}
		if([NSFileTypeSymbolicLink isEqualToString:[dict objectForKey:NSFileType]]) {
			[v setLink:YES];
		}
	}}}
	if(isFile()) {
		v.setType(FileInfo.FILE_TYPE_FILE)
	}
	else if(isDirectory()) {
		v.setType(FileInfo.FILE_TYPE_DIR)
	}
	return(v)
}

func getMyReader private as MyReader
{
	var handle as !"NSFileHandle*"
	lang "objc" {{{
		handle = [NSFileHandle fileHandleForReadingAtPath:path];
	}}}
	if(handle == null) {
		return(null)
	}
	var v = new MyReader()
	v.setSize(getSize())
	v.setHandle(handle)
	return(v)
}

func read override as FileReader
{
	return(getMyReader())
}

func exists override as bool
{
	return(lang "objc" bool {{{ [manager fileExistsAtPath:path] }}})
}

func isExecutable override as bool
{
	return(lang "objc" bool {{{ [manager isExecutableFileAtPath:path] }}})
}

func isFile override as bool
{
	var v as bool
	var isdir as bool
	lang "objc" {{{
		v = [manager fileExistsAtPath:path isDirectory:&isdir];
	}}}
	if(v == false) {
		return(false)
	}
	return(!isdir)
}

func isDirectory override as bool
{
	var v as bool
	var isdir as bool
	lang "objc" {{{
		v = [manager fileExistsAtPath:path isDirectory:&isdir];
	}}}
	if(v == false) {
		return(false)
	}
	return(isdir)
}

func isLink override stub as bool
func createFifo override stub as bool
func createDirectory override stub as bool
func createDirectoryRecursive override stub as bool
func removeDirectory override stub as bool

func getPath override as string
{
	return(path)
}

func isSame(file as File) override stub as bool
func remove override stub as bool
func removeRecursive override stub as bool
func compareModificationTime(file as File) override stub as int
func directoryName override stub as string
func baseName override stub as string
func isIdentical(file as File) override stub as bool

func getContentsBuffer override as buffer
{
	var rr = getMyReader()
	if(rr == null) {
		return(null)
	}
	return(rr.readAll())
}

func getContentsString(encoding as string) override as string
{
	var b = getContentsBuffer()
	if(b == null) {
		return(null)
	}
	return(String.forBuffer(b, encoding))
}

// FIXME func lines override stub as Iterator
