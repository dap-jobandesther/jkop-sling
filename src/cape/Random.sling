
/*
 * This file is part of Jkop
 * Copyright (c) 2016 Job and Esther Technologies, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

class:

IFDEF("target_cs") {
	lang "cs" {{{
		System.Random random;
	}}}
}
ELSE IFDEF("target_java") {
	lang "java" {{{ java.util.Random random; }}}
}
ELSE IFDEF("target_objc") {
	var seed as int64
}

ctor
{
	IFDEF("target_cs") {
		lang "cs" {{{
			random = new System.Random();
		}}}
	}
	ELSE IFDEF("target_java") {
		lang "java" {{{ random = new java.util.Random(); }}}
	}
}

ctor(seed as int64)
{
	setSeed(seed)
}

func setSeed(seed as int64)
{
	IFDEF("target_cs") {
		lang "cs" {{{
			random = new System.Random((System.Int32)seed);
		}}}
	}
	ELSE IFDEF("target_java") {
		lang "java" {{{ random.setSeed(seed) }}};
	}
	ELSE IFDEF("target_objc") {
		this.seed = seed
	}
}

func nextBoolean as bool
{
	if(nextInt() % 2 == 0) {
		return(false)
	}
	return(true)
}

func nextInt as int32
{
	IFDEF("target_cs") {
		return(lang "cs" int32 {{{ random.Next() }}})
	}
	ELSE IFDEF("target_java") {
		return(lang "java" int32 {{{ random.nextInt() }}})
	}
	ELSE IFDEF("target_js") {
		return(nextInt(-Math.pow(2, 31), Math.pow(2, 31) - 1))
	}
	ELSE {
		ERROR("Not implemented")
		return(0)
	}
}

func nextInt(n as int32) as int32
{
	IFDEF("target_cs") {
		return(lang "cs" int32 {{{ random.Next(n) }}})
	}
	ELSE IFDEF("target_java") {
		return(lang "java" int32 {{{ random.nextInt(n) }}})
	}
	ELSE IFDEF("target_js") {
		return(lang "js" int32 {{{ Math.floor((Math.random() * n) + 1) }}})
	}
	ELSE {
		ERROR("Not implemented")
		return(0)
	}
}

**
** Used to retrieve integer values from "s" (inclusive) and "e" (exclusive)
**

func nextInt(s as int32, e as int32) as int32
{
	IFDEF("target_cs") {
		return(lang "cs" int32 {{{ random.Next(s, e) }}})
	}
	ELSE IFDEF("target_java") {
		return(lang "java" int32 {{{ random.nextInt(e - s + 1) + s }}});
	}
	ELSE IFDEF("target_js") {
		return(lang "js" int32 {{{ Math.floor(Math.random() * (e - s) + s) }}})
	}
	ELSE {
		ERROR("Not implemented")
		return(0)
	}
}

func nextBytes(buf as array<int8>)
{
	IFDEF("target_cs") {
		lang "cs" {{{
			random.NextBytes((byte[])(System.Array)buf);
		}}}
	}
	ELSE IFDEF("target_java") {
		lang "java" {{{ random.nextBytes(buf); }}}
	}
	ELSE {
		ERROR("Not implemented")
	}
}

func nextDouble as double
{
	IFDEF("target_cs") {
		return(lang "cs" double {{{ random.NextDouble() }}})
	}
	ELSE IFDEF("target_java") {
		return(lang "java" double {{{ random.nextDouble() }}})
	}
	ELSE IFDEF("target_js") {
		return(lang "js" double {{{ Math.random() }}})
	}
	ELSE {
		ERROR("Not implemented")
		return(0.0)
	}
}

func nextFloat as float
{
	IFDEF("target_cs") {
		return(lang "cs" float {{{ (float)random.NextDouble() }}})
	}
	ELSE IFDEF("target_java") {
		return(lang "java" float {{{ random.nextFloat() }}})
	}
	ELSE IFDEF("target_js") {
		return(lang "js" float {{{ Math.random().toFixed(8) }}})
	}
	ELSE {
		ERROR("Not implemented")
		return(0.0f)
	}
}

func nextGaussian stub as double