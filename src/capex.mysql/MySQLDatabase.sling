
/*
 * This file is part of Sympathy
 * Copyright (c) 2016 Job and Esther Technologies, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */

class is SQLDatabase abstract imports cape imports capex:

prop databaseName as string;

func instance private static as this
{
	IFDEF("target_netx") {
		return(new MySQLDatabaseForDotNet());
	}
	ELSE {
		ERROR("Not implemented");
		return(null);
	}
}

func forConnectionString(connectionString as string, logContext as LoggingContext) static as this
{
	if(connectionString == null) {
		return(null)
	}
	var ss = String.split(connectionString, ':', 4)
	if(ss == null || Vector.getSize(ss) < 4) {
		return(null)
	}
	return(connect(ss[0], ss[1], ss[2], ss[3], logContext))
}

func connect(serverAddress as string, username as string, password as string, database as string, logger as LoggingContext = null) static as this
{
	if(String.isEmpty(serverAddress) == null || username == null || password == null || String.isEmpty(database)) {
		return(null);
	}
	var v = instance();
	if(v == null) {
		return(null);
	}
	v.setLogger(logger);
	if(v.initialize(serverAddress, username, password, database) == false) {
		v = null;
	}
	return(v);
}

func getDatabaseTypeId override as string
{
	return("mysql");
}

func initialize(serverAddress as string, username as string, password as string, database as string) virtual as bool
{
	return(true);
}

func querySingleRow(stmt as SQLStatement) override as cape.DynamicMap
{
	var it = query(stmt);
	if(it == null) {
		return(null);
	}
	var v as cape.DynamicMap = it.next();
	return(v);
}

func tableExists(table as string) override as bool
{
	if(table == null || databaseName == null) {
		return(false);
	}
	var stmt = prepare("SELECT TABLE_NAME FROM information_schema.tables WHERE table_schema = ? AND table_name = ? LIMIT 1;");
	if(stmt == null) {
		return(false);
	}
	stmt.addParamString(databaseName);
	stmt.addParamString(table);
	var sr = querySingleRow(stmt);
	if(sr == null) {
		return(false);
	}
	if(String.equals(table, sr.getString("TABLE_NAME")) == false) {
		return(false);
	}
	return(true);
}

func queryAllTableNames(callback as function<void, vector>) override
{
	var stmt = prepare("SELECT TABLE_NAME FROM information_schema.tables WHERE table_schema = ?;");
	if(stmt == null) {
		callback(null);
		return;
	}
	stmt.addParamString(databaseName);
	query(stmt, func(it as SQLResultSetIterator) {
		if(it == null) {
			callback(null);
			return;
		}
		var v = new vector;
		loop
		{
			var vv = it.next();
			if(vv == null) {
				break;
			}
			v += vv.getString("TABLE_NAME");
		}
		callback(v);
	});
}

func queryAllTableNames override as vector
{
	if(databaseName == null) {
		return(null);
	}
	var stmt = prepare("SELECT TABLE_NAME FROM information_schema.tables WHERE table_schema = ?;");
	if(stmt == null) {
		return(null);
	}
	stmt.addParamString(databaseName);
	var it = query(stmt);
	if(it == null) {
		return(null);
	}
	var v = new vector;
	loop {
		var vv = it.next();
		if(vv == null) {
			break;
		}
		v += vv.getString("TABLE_NAME");
	}
	return(v);
}

func columnToCreateString(cc as SQLTableColumnInfo) private as string
{
	var sb = new StringBuilder();
	var columnName = cc.getName();
	sb.append(columnName);
	sb.append(' ');
	var tt = cc.getType();
	if(tt == SQLTableColumnInfo.TYPE_INTEGER_KEY) {
		sb.append("INTEGER AUTO_INCREMENT, PRIMARY KEY (" .. columnName .. ")");
	}
	else if(tt == SQLTableColumnInfo.TYPE_INTEGER) {
		sb.append("INTEGER");
	}
	else if(tt == SQLTableColumnInfo.TYPE_STRING) {
		sb.append("VARCHAR(255)");
	}
	else if(tt == SQLTableColumnInfo.TYPE_STRING_KEY) {
		sb.append("VARCHAR(255), PRIMARY KEY (" .. columnName .. ")");
	}
	else if(tt == SQLTableColumnInfo.TYPE_TEXT) {
		sb.append("TEXT");
	}
	else if(tt == SQLTableColumnInfo.TYPE_BLOB) {
		sb.append("LONGBLOB");
	}
	else if(tt == SQLTableColumnInfo.TYPE_DOUBLE) {
		sb.append("REAL");
	}
	else {
		Log.error(getLogger(), "Unknown column type: " .. String.forInteger(tt))
		sb.append("UNKNOWN");
	}
	return(sb.toString());
}

func prepareCreateTableStatement(table as string, columns as vector<SQLTableColumnInfo>) override as SQLStatement
{
	if(table == null || columns == null) {
		return(null);
	}
	var sb = new StringBuilder();
	sb.append("CREATE TABLE ");
	sb.append(table);
	sb.append(" (");
	var first = true;
	foreach(column as SQLTableColumnInfo in columns) {
		if(first == false) {
			sb.append(',');
		}
		sb.append(' ');
		sb.append(columnToCreateString(column));
		first = false;
	}
	sb.append(" );");
	return(prepare(sb.toString()));
}

func prepareDeleteTableStatement(table as string) override as SQLStatement
{
	if(table == null) {
		return(null);
	}
	var sb = new StringBuilder();
	sb.append("DROP TABLE ");
	sb.append(table);
	sb.append(";");
	return(prepare(sb.toString()));
}

func prepareCreateIndexStatement(table as string, column as string, unique as bool) override as SQLStatement
{
	if(table == null || column == null) {
		return(null);
	}
	var unq = "";
	if(unique) {
		unq = "UNIQUE ";
	}
	var sql = "CREATE " .. unq .. "INDEX " .. table .. "_" .. column .. " ON " .. table .. " (" .. column .. ")";
	return(prepare(sql));
}

