
/*
 * This file is part of Jkop
 * Copyright (c) 2016 Job and Esther Technologies, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

class is GuiApplicationContext imports cape:

depend "objc-header-m:<UIKit/UIKit.h>"

func logError(message as string)
{
	PRINT("[ERROR] " .. message)
}

func logWarning(message as string)
{
	PRINT("[WARNING] " .. message)
}

func logInfo(message as string)
{
	PRINT("[INFO] " .. message)
}

func logDebug(message as string)
{
	PRINT("[DEBUG] " .. message)
}

func getApplicationDataDirectory as File
{
	ERROR("Not implemented")
	return(null)
}

func getResourceImage(id as string) as Image
{
	if(String.isEmpty(id)) {
		return(null)
	}
	var cp = CurrentProcess.getExecutableFile()
	if(cp == null) {
		return(null)
	}
	var bundleDir = cp.getParent()
	if(bundleDir == null) {
		return(null)
	}
	var f = bundleDir.entry(id .. ".png")
	if(f.isFile() == false) {
		f = bundleDir.entry(id .. ".jpg")
	}
	if(f.isFile() == false) {
		return(null)
	}
	return(ImageForIOS.forFile(f))
}

class MyAlertDelegate implements !"UIAlertViewDelegate"
{
	prop callback as function

	func onDismissed
	{
		if(callback != null) {
			callback()
		}
	}

	lang "objc" {{{
		- (void)alertView:(UIAlertView *)alertView didDismissWithButtonIndex:(NSInteger)buttonIndex
		{
			[self onDismissed];
		}
	}}}
}

func showMessageDialog(title as string, message as string)
{
	showMessageDialog(title, message, null)
}

func showMessageDialog(title as string, message as string, callback as function)
{
	var dg as MyAlertDelegate
	if(callback != null) {
		dg = new MyAlertDelegate().setCallback(callback)
	}
	lang "objc" {{{
		UIAlertView* alert = [[UIAlertView alloc]
			initWithTitle:title
			message:message
			delegate:dg
			cancelButtonTitle:nil otherButtonTitles:@"OK",nil];
		[alert show];
	}}}
}

func showConfirmDialog(title as string, message as string, okcallback as function, cancelcallback as function)
{
	ERROR("Not implemented")
}

func showErrorDialog(message as string)
{
	showErrorDialog(message, null)
}

func showErrorDialog(message as string, callback as function)
{
	var dg as MyAlertDelegate
	if(callback != null) {
		dg = new MyAlertDelegate().setCallback(callback)
	}
	lang "objc" {{{
		UIAlertView* alert = [[UIAlertView alloc]
			initWithTitle:@"ERROR"
			message:message
			delegate:dg
			cancelButtonTitle:nil otherButtonTitles:@"OK",nil];
		[alert show];
	}}}
}

func getScreenWidth as int
{
	return(getDeviceInfo().getScreenWidth())
}

func getScreenHeight as int
{
	return(getDeviceInfo().getScreenHeight())
}

depend "objc-header-m:<sys/utsname.h>"

func getMachineName as string
{
	var v as string
	lang "objc" {{{
		struct utsname si;
		if(uname(&si) >= 0) {
			v = [NSString stringWithCString:si.machine encoding:NSUTF8StringEncoding];
		}
	}}}
	return(v)
}

func detectDeviceInfo private as IOSDeviceInfo
{
	// Source of information: https://en.wikipedia.org/wiki/List_of_iOS_devices
	var name = getMachineName()
	if(name == null) {
	}
	else if(String.startsWith(name, "iPhone")) {
		if(name == "iPhone8,1") {
			return(IOSDeviceInfo.forDetails(name, "iPhone 6S", 326))
		}
		else if(name == "iPhone8,2") {
			return(IOSDeviceInfo.forDetails(name, "iPhone 6S Plus", 401))
		}
		else if(name == "iPhone8,4") {
			return(IOSDeviceInfo.forDetails(name, "iPhone SE", 326))
		}
		else if(name == "iPhone9,1" || name == "iPhone9,3") {
			return(IOSDeviceInfo.forDetails(name, "iPhone 7", 326))
		}
		else if(name == "iPhone9,2" || name == "iPhone9,4") {
			return(IOSDeviceInfo.forDetails(name, "iPhone 7 Plus", 401))
		}
		else if(name == "iPhone1,1") {
			return(IOSDeviceInfo.forDetails(name, "iPhone 1", 163))
		}
		else if(name == "iPhone1,2") {
			return(IOSDeviceInfo.forDetails(name, "iPhone 3G", 163))
		}
		else if(name == "iPhone2,1") {
			return(IOSDeviceInfo.forDetails(name, "iPhone 3G", 163))
		}
		else if(name == "iPhone3,1" || name == "iPhone3,2" || name == "iPhone3,3") {
			return(IOSDeviceInfo.forDetails(name, "iPhone 4", 326))
		}
		else if(name == "iPhone4,1") {
			return(IOSDeviceInfo.forDetails(name, "iPhone 4S", 326))
		}
		else if(name == "iPhone5,1" || name == "iPhone5,2") {
			return(IOSDeviceInfo.forDetails(name, "iPhone 5", 326))
		}
		else if(name == "iPhone5,3" || name == "iPhone5,4") {
			return(IOSDeviceInfo.forDetails(name, "iPhone 5C", 326))
		}
		else if(name == "iPhone6,1" || name == "iPhone6,2") {
			return(IOSDeviceInfo.forDetails(name, "iPhone 5S", 326))
		}
		else if(name == "iPhone7,2") {
			return(IOSDeviceInfo.forDetails(name, "iPhone 6", 326))
		}
		else if(name == "iPhone7,1") {
			return(IOSDeviceInfo.forDetails(name, "iPhone 6 Plus", 401))
		}
		else {
			return(IOSDeviceInfo.forDetails(name, "iPhone (unknown)", 326))
		}
	}
	else if(String.startsWith(name, "iPod")) {
		if(name == "iPod1,1") {
			return(IOSDeviceInfo.forDetails(name, "iPod Touch 1G", 163))
		}
		else if(name == "iPod2,1") {
			return(IOSDeviceInfo.forDetails(name, "iPod Touch 2G", 163))
		}
		else if(name == "iPod3,1") {
			return(IOSDeviceInfo.forDetails(name, "iPod Touch 3G", 163))
		}
		else if(name == "iPod4,1") {
			return(IOSDeviceInfo.forDetails(name, "iPod Touch 4G", 326))
		}
		else if(name == "iPod5,1") {
			return(IOSDeviceInfo.forDetails(name, "iPod Touch 5G", 326))
		}
		else if(name == "iPod7,1") {
			return(IOSDeviceInfo.forDetails(name, "iPod Touch 6G", 326))
		}
		else {
			return(IOSDeviceInfo.forDetails(name, "iPod Touch (unknown)", 326))
		}
	}
	else if(String.startsWith(name, "iPad")) {
		if(name == "iPad1,1") {
			return(IOSDeviceInfo.forDetails(name, "iPad 1G", 132))
		}
		else if(name == "iPad2,1" || name == "iPad2,2" || name == "iPad2,3" || name == "iPad2,4") {
			return(IOSDeviceInfo.forDetails(name, "iPad 2", 132))
		}
		else if(name == "iPad3,1" || name == "iPad3,2" || name == "iPad3,3") {
			return(IOSDeviceInfo.forDetails(name, "iPad 3", 264))
		}
		else if(name == "iPad3,4" || name == "iPad3,5" || name == "iPad3,6") {
			return(IOSDeviceInfo.forDetails(name, "iPad 4", 264))
		}
		else if(name == "iPad4,1" || name == "iPad4,2" || name == "iPad4,3") {
			return(IOSDeviceInfo.forDetails(name, "iPad Air", 264))
		}
		else if(name == "iPad5,3" || name == "iPad5,4") {
			return(IOSDeviceInfo.forDetails(name, "iPad Air 2", 264))
		}
		else if(name == "iPad2,5" || name == "iPad2,6" || name == "iPad2,7") {
			return(IOSDeviceInfo.forDetails(name, "iPad Mini 1G", 163))
		}
		else if(name == "iPad4,4" || name == "iPad4,5" || name == "iPad4,6") {
			return(IOSDeviceInfo.forDetails(name, "iPad Mini 2", 326))
		}
		else if(name == "iPad4,7" || name == "iPad4,8" || name == "iPad4,9") {
			return(IOSDeviceInfo.forDetails(name, "iPad Mini 3", 326))
		}
		else if(name == "iPad5,1" || name == "iPad5,2") {
			return(IOSDeviceInfo.forDetails(name, "iPad Mini 4", 326))
		}
		else if(name == "iPad6,7" || name == "iPad6,8") {
			return(IOSDeviceInfo.forDetails(name, "iPad Pro 12.9in", 264))
		}
		else if(name == "iPad6,3" || name == "iPad6,4") {
			return(IOSDeviceInfo.forDetails(name, "iPad Pro 9.7in", 264))
		}
		else {
			return(IOSDeviceInfo.forDetails(name, "iPad (unknown)", 264))
		}
	}
	else if(String.startsWith(name, "Watch")) {
		return(IOSDeviceInfo.forDetails(name, "Apple Watch", 326))
	}
	else if(name == "i386") {
		return(IOSDeviceInfo.forDetails(name, "iOS Simulator x86", 0))
	}
	else if(name == "x86_64") {
		return(IOSDeviceInfo.forDetails(name, "iOS Simulator x64", 0))
	}
	return(IOSDeviceInfo.forDetails(name, "Apple Device (unknown)", 326))
}

var deviceInfo as IOSDeviceInfo

func getDeviceInfo as IOSDeviceInfo
{
	if(deviceInfo == null) {
		deviceInfo = detectDeviceInfo()
		var width as int
		var height as int
		var scale as double
		lang "objc" {{{
			width = [[UIScreen mainScreen] bounds].size.width;
			height = [[UIScreen mainScreen] bounds].size.height;
			scale = [[UIScreen mainScreen] nativeScale];
		}}}
		deviceInfo.setScreenWidth(width)
		deviceInfo.setScreenHeight(height)
		deviceInfo.setScale(scale)
		if(deviceInfo.getDpi() < 1) {
			var ss = 163 * scale as int
			if(ss > 400) {
				ss = 401
			}
			deviceInfo.setDpi(ss)
		}
		logDebug("Device detected: " .. deviceInfo.toString())
	}
	return(deviceInfo)
}

func getScreenDensity as int
{
	return(getDeviceInfo().getDpi())
}

func getScreenScaleFactor as double
{
	return(getDeviceInfo().getScale())
}

func getHeightValue(spec as string) as double
{
	return(cave.Length.asPoints(spec, getScreenDensity()) / getScreenScaleFactor())
}

func getWidthValue(spec as string) as double
{
	return(cave.Length.asPoints(spec, getScreenDensity()) / getScreenScaleFactor())
}

func startTimer(timeout as long, callback as function)
{
	lang "objc" {{{
		dispatch_time_t dtt = dispatch_time(DISPATCH_TIME_NOW, timeout * 1000000);
		dispatch_after(dtt, dispatch_get_main_queue(), ^(void) {
			callback();
		});
	}}}
}
