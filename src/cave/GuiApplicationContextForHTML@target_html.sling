
/*
 * This file is part of Jkop
 * Copyright (c) 2016 Job and Esther Technologies, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

class is GuiApplicationContext imports cape:

var imageCache = new map<string, Image>

func clearResources
{
	imageCache = new map<string, Image>
}

func prepareResources(resources as array<string>, callback as function)
{
	if(resources == null) {
		if(callback != null) {
			callback()
		}
		return
	}
	var loadedResources = 0
	var totalResources = SIZE(resources)
	var onResourceLoadingComplete = func {
		loadedResources ++
		if(loadedResources >= totalResources) {
			logInfo("All resources have been loaded")
			if(callback != null) {
				callback()
			}
		}
	}
	foreach(path in resources) {
		var pp = path
		var slash = String.lastIndexOf(pp, '/')
		if(slash >= 0) {
			pp = String.getSubString(pp, slash+1)
		}
		var dot = String.lastIndexOf(pp, '.')
		if(dot < 0) {
			onResourceLoadingComplete()
			continue
		}
		var ext = String.getSubString(pp, dot+1)
		pp = String.getSubString(pp, 0, dot)
		if(String.equalsIgnoreCase(ext, "png") || String.equalsIgnoreCase(ext, "jpg") || String.equalsIgnoreCase(ext, "gif")) {
			var onLoad #used = func {
				logDebug("Image loaded")
				onResourceLoadingComplete()
			}
			var onError #used = func {
				logError("Failed to load image")
				onResourceLoadingComplete()
			}
			logDebug("Start loading resource: `" .. pp .. ": `" .. path .. "'")
			var imgo = new ImageForHTML()
			var image as object
			lang "js" {{{
				image = new Image();
				image.onload = onLoad;
				image.onerror = onError;
				image.src = path;
			}}}
			imgo.image = image
			imageCache[pp] = imgo
		}
		else {
			logWarning("Unsupported resource file type `" .. ext .. "': `" .. path .. "'")
			onResourceLoadingComplete()
		}
	}
}

func getResourceImage(id as string) as Image
{
	return(Map.getValue(imageCache, id))
}

func switchActivity(className as string) stub

func logError(message as string)
{
	PRINT("[ERROR] " .. message)
}

func logWarning(message as string)
{
	PRINT("[WARNING] " .. message)
}

func logInfo(message as string)
{
	PRINT("[INFO] " .. message)
}

func logDebug(message as string)
{
	PRINT("[DEBUG] " .. message)
}

func showConfirmDialog(title as string, message as string, okcallback as function, cancelcallback as function) stub

func showMessageDialog(title as string, message as string)
{
	showMessageDialog(title, message, null)
}

func showMessageDialog(title as string, message as string, callback as function)
{
	lang "js" {{{
		window.alert(message);
	}}}
	callback()
}

func showErrorDialog(message as string)
{
	showErrorDialog(message, null)
}

func showErrorDialog(message as string, callback as function)
{
	lang "js" {{{
		window.alert(message);
	}}}
	callback()
}
