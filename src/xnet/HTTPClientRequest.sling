
/*
 * This file is part of Jkop
 * Copyright (c) 2016 Job and Esther Technologies, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

class is StringObject imports cape:

func forGET(url as string) static as this
{
	var v = new this();
	v.setMethod("GET");
	v.setUrl(url);
	return(v);
}

func forPOST(url as string, mimeType as string, data as SizedReader) static as this
{
	var v = new this();
	v.setMethod("POST");
	v.setUrl(url);
	if(String.isEmpty(mimeType) == false) {
		v.addHeader("Content-Type", mimeType);
	}
	if(data != null) {
		v.setBody(data);
	}
	return(v);
}

func forPOST(url as string, mimeType as string, data as buffer) static as this
{
	var v = new this();
	v.setMethod("POST");
	v.setUrl(url);
	if(String.isEmpty(mimeType) == false) {
		v.addHeader("Content-Type", mimeType);
	}
	if(data != null) {
		v.setBody(BufferReader.forBuffer(data));
	}
	return(v);
}

/*
func getWithParams(url as string, params as map<string,string>) static as this
{
	var v = new this();
	v.setParams(params);
	v.setMethod("GET");
	v.setUr(url);
	return(v);
}

func postEncodedForm(url as string, params as map<string,string>) static as this
{
	var v = new this();
	v.setMethod("POST");
	v.setUrl(url);
	if(params != null) {
		var sb = new StringBuilder();
		foreach(key in Map.getKeys(params)) {
			if(sb.count() > 0) {
				sb.append('&');
			}
			sb.append(key);
			sb.append('=');
			sb.append(URLEncoder.encode(Map.get(params, key)));
		}
	}
	// FIXME v.setBody(sb.toString());
	v.addHeader("Content-Type", "application/x-www-form-urlencoded");
	return(v);
}

func postWithData(url as string, mimeType as string, data as SizedReader)
{
	var v = new this();
	v.setMethod("POST");
	v.setUrl(url);
	v.addHeader("Content-Type", mimeType);
	v.setBody(data);
	return(v);
}
*/

prop method as string;
prop protocol as string;
prop username as string;
prop password as string;
prop serverAddress as string;
prop serverPort as int;
prop requestPath as string;
prop body as SizedReader;
var queryParams as KeyValueList<string,string>;
prop rawHeaders as KeyValueListForStrings;
prop headers as map<string,string>;

ctor
{
	protocol = "http";
	serverPort = 80;
	requestPath = "/";
	method = "GET";
}

func setUrl(url as string)
{
	var uu = URL.forString(url);
	setProtocol(uu.getScheme());
	setUsername(uu.getUsername());
	setPassword(uu.getPassword());
	setServerAddress(uu.getHost());
	var pp = String.toInteger(uu.getPort());
	if(pp < 1) {
		if(protocol == "https") {
			pp = 443;
		}
		else if(protocol == "http") {
			pp = 80;
		}
	}
	setServerPort(pp);
	setRequestPath(uu.getPath());
	queryParams = uu.getRawQueryParameters();
}

func addHeader(key as string, value as string)
{
	if(rawHeaders == null) {
		rawHeaders = new KeyValueListForStrings();
	}
	if(headers == null) {
		headers = new map<string,string>;
	}
	rawHeaders.add(key, value);
	headers[String.toLowerCase(key)] = value;
}

func getHeader(key as string) as string
{
	if(headers == null) {
		return(null);
	}
	return(Map.get(headers, key));
}

func setUserAgent(agent as string)
{
	addHeader("User-Agent", agent);
}

func toString(defaultUserAgent as string) as string
{
	var rq = new StringBuilder();
	var body = getBody();
	var headers = getHeaders();
	var path = getRequestPath();
	if(String.isEmpty(path)) {
		path = "/";
	}
	rq.append(getMethod());
	rq.append(' ');
	rq.append(path);
	var first as bool = true;
	if(queryParams != null) {
		var it as Iterator<KeyValuePair<string,string>> = queryParams.iterate();
		while(it != null) {
			var kv = it.next();
			if(kv == null) {
				break;
			}
			if(first) {
				rq.append('?');
				first = false;
			}
			else {
				rq.append('&');
			}
			rq.append(kv.key);
			var val = kv.value;
			if(val != null) {
				rq.append('=');
				rq.append(URLEncoder.encode(val, false, false));
			}
		}
	}
	rq.append(' ');
	rq.append("HTTP/1.1\r\n");
	var hasUserAgent = false;
	var hasHost = false;
	var hasContentLength = false;
	if(rawHeaders != null) {
		var it = (rawHeaders as! KeyValueList<string,string>).iterate();
		while(true) {
			var kvp = it.next();
			if(kvp == null) {
				break;
			}
			var key = kvp.key;
			if(String.equalsIgnoreCase(key, "user-agent")) {
				hasUserAgent = true;
			}
			else if(String.equalsIgnoreCase(key, "host")) {
				hasHost = true;
			}
			else if(String.equalsIgnoreCase(key, "content-length")) {
				hasContentLength = true;
			}
			rq.append(key);
			rq.append(": ");
			rq.append(kvp.value);
			rq.append("\r\n");
		}
	}
	if(hasUserAgent == false && defaultUserAgent != null) {
		rq.append("User-Agent: ");
		rq.append(defaultUserAgent);
		rq.append("\r\n");
	}
	if(hasHost == false) {
		rq.append("Host: " .. getServerAddress() .. "\r\n");
	}
	if(body != null && hasContentLength == false) {
		var bs = body.getSize();
		var bss = String.forInteger(bs);
		rq.append("Content-Length: " .. bss .. "\r\n");
	}
	rq.append("\r\n");
	return(rq.toString());
}

func toString as string
{
	return(toString(null));
}