
/*
 * This file is part of Jkop
 * Copyright (c) 2016 Job and Esther Technologies, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

class is NetworkConnectionManager abstract imports cape:

prop port as int
var socket as TCPSocket
var esocket as IOManagerEntry

func initialize override as bool
{
	if(base.initialize() == false) {
		return(false)
	}
	socket = TCPSocket.createAndListen(port)
	if(socket == null) {
		Log.error(logContext, "Failed to listen on TCP port " .. String.forInteger(port))
		cleanup()
		return(false)
	}
	esocket = ioManager.addWithReadListener(socket, onIncomingConnection)
	if(esocket == null) {
		Log.error(logContext, "Failed to register with event loop")
		cleanup()
		return(false)
	}
	Log.info(logContext, "TCP server initialized, listening on port " .. String.forInteger(port))
	return(true)
}

func cleanup override
{
	if(esocket != null) {
		esocket.remove()
		esocket = null
	}
	if(socket != null) {
		socket.close()
		socket = null
	}
	base.cleanup()
}

func onIncomingConnection private
{
	var nn = socket.accept()
	if(nn == null) {
		Log.error(logContext, "Failed to accept an incoming client.")
		return
	}
	onNewSocket(nn)
}
