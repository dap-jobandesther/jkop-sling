
/*
 * This file is part of Jkop
 * Copyright (c) 2016 Job and Esther Technologies, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

class is HTTPClient imports cape:

class MyResponseParser imports cape
{
	var receivedData as buffer = null;
	var headers public as HTTPClientResponse;
	var isChunked public = false;
	var contentLength public = 0;
	var dataCounter public = 0;
	prop listener as HTTPClientListener;
	prop endOfResponse as bool = false;
	prop aborted as bool = false;

	func reset virtual
	{
		isChunked = false;
		headers = null;
		contentLength = 0;
		dataCounter = 0;
		endOfResponse = false;
		aborted = false;
	}

	func hasEndOfHeaders(buf as buffer, size as long) private as bool
	{
		var n = 0;
		var v = false;
		while (n <= size - 4) {
			if(Buffer.getByte(buf, n) == '\r' && Buffer.getByte(buf, n+1) == '\n' && Buffer.getByte(buf, n+2) == '\r' && Buffer.getByte(buf, n+3) == '\n') {
				v = true;
				break;
			}
			n++;
		}
		return(v);
	}

	func parseResponse(buf as buffer) private as HTTPClientResponse
	{
		var i = 0;
		var p = '0' as uint8;
		var v as HTTPClientResponse;
		var first = true;
		var isChunked = false;
		while(true) {
			var sb = new StringBuilder();
			while((p = Buffer.getByte(buf, i)) != 0) {
				if (p == '\r') {
				}
				else if (p == '\n') {
					i++;
					break;
				}
				else {
					sb.append(p as char);
				}
				i++;
			}
			var t = sb.toString();
			if(String.isEmpty(t)) {
				break;
			}
			if(first) {
				var comps = String.split(t, ' ', 3);
				v = new HTTPClientResponse();
				v.setHttpVersion(Vector.get(comps, 0));
				v.setHttpStatus(Vector.get(comps, 1));
				v.setHttpStatusDescription(Vector.get(comps, 2));
			}
			else {
				var comps = String.split(t, ':', 2);
				var key = Vector.get(comps, 0);
				if(String.isEmpty(key) == false) {
					var val = String.strip(Vector.get(comps, 1));
					v.addHeader(key, val);
					if(isChunked == false && String.equalsIgnoreCase(key, "transfer-encoding")) {
						if(val == "chunked") {
							isChunked = true;
						}
					}
					else if(contentLength < 1 && String.equalsIgnoreCase(key, "content-length")) {
						contentLength = String.toInteger(val);
					}
				}
			}
			first = false;
		}
		var l = Buffer.getSize(buf) - i as long;
		if(l > 0) {
			receivedData = Buffer.getSubBuffer(buf, i, l);
		}
		else {
			receivedData = null;
		}
		this.isChunked = isChunked;
		return(v);
	}

	func getChunk private as buffer
	{
		if(receivedData == null) {
			return(null);
		}
		var i = 0;
		var sb = new StringBuilder();
		while(true) {
			var p = Buffer.getByte(receivedData, i);
			if(p == '\r') {
			}
			else if(p == '\n') {
				i++;
				break;
			}
			else {
				sb.append(p as char);
			}
			i++;
			if(sb.count() >= 16) {
				// garbage chunk
				return(null);
			}
		}
		var cl = -1;
		var t = String.strip(sb.toString());
		if(String.isEmpty(t) == false) {
			cl = String.toIntegerFromHex(t);
		}
		var v as buffer;
		if(cl > 0) {
			if(Buffer.getSize(receivedData) - i < cl) {
				// FIXME - desired chunk is larger than what we have in buffer. must still wait for the rest to come?
				return(null);
			}
			v = MALLOC(cl);
			Buffer.copyFrom(v, receivedData, i, 0, cl);
			i += cl;
		}
		while(i < Buffer.getSize(receivedData) && (Buffer.getByte(receivedData, i) == '\r' || Buffer.getByte(receivedData, i) == '\n')) {
			i++;
		}
		var rem = Buffer.getSize(receivedData) - i as int;
		if(rem > 0) {
			var tmp = receivedData;
			receivedData = MALLOC(rem);
			Buffer.copyFrom(receivedData, tmp, i, 0, rem);
		}
		else {
			receivedData = null;
		}
		return(v);
	}

	func onDataReceived(buf as buffer, size as long)
	{
		if(size > 0) {
			receivedData = Buffer.append(receivedData, buf, size);
		}
		if(headers == null) {
			if(hasEndOfHeaders(receivedData, Buffer.getSize(receivedData))) {
				headers = parseResponse(receivedData);
				if(headers != null) {
					onHeadersReceived(headers);
				}
			}
		}
		if(isChunked) {
			loop {
				var r = getChunk();
				if(r != null) {
					var sz = Buffer.getSize(r);
					dataCounter += sz;
					onBodyDataReceived(r, sz);
				}
				else {
					reset();
					onEndOfResponse();
					break;
				}
				if(receivedData == null) {
					break;
				}
			}
		}
		else if(contentLength > 0) { // FIXME: Or HTTP/1.0 or HTTP/0.9
			var rsz = Buffer.getSize(receivedData);
			if(rsz > 0) {
				if(contentLength <= 0 || dataCounter + rsz <= contentLength) {
					var v = receivedData;
					receivedData = null;
					dataCounter += rsz;
					onBodyDataReceived(v, rsz);
				}
				else {
					var vsz = contentLength - dataCounter;
					var v = Buffer.getSubBuffer(receivedData, 0, vsz);
					receivedData = Buffer.getSubBuffer(receivedData, vsz, rsz-vsz);
					dataCounter += vsz;
					onBodyDataReceived(v, vsz);
				}
			}
			if(dataCounter >= contentLength) {
				reset();
				onEndOfResponse();
			}
		}
		else {
			reset();
			onEndOfResponse();
		}
	}

	func onHeadersReceived(headers as HTTPClientResponse)
	{
		if(listener != null && listener.onResponseReceived(headers) == false) {
			if(listener != null) {
				listener.onAborted();
			}
			aborted = true;
		}
	}

	func onBodyDataReceived(buffer as buffer, size as long)
	{
		if(listener != null && listener.onDataReceived(buffer) == false) {
			if(listener != null) {
				listener.onAborted();
			}
			aborted = true;
		}
	}

	func onEndOfResponse
	{
		if(listener != null) {
			listener.onResponseCompleted();
		}
		endOfResponse = true;
	}
}

var openSocket as ConnectedSocket;
var openSocketProtocol as string;
var openSocketAddress as string;
var openSocketPort as int;
prop defaultUserAgent as string = null;
var parser as MyResponseParser;
var receiveBuffer as buffer;
prop acceptInvalidCertificate = false

ctor
{
	receiveBuffer = MALLOC(64 * 1024);
}

func openConnection(protocol as string, address as string, aport as int, listener as HTTPClientListener) as bool
{
	closeConnection(listener);
	if(String.isEmpty(address)) {
		if(listener != null) {
			listener.onError("No server address");
		}
		return(false);
	}
	if(protocol != "http" && protocol != "https") {
		if(listener != null) {
			listener.onError("Protocol must be http or https");
		}
		return(false);
	}
	var port = aport;
	if(port < 1) {
		if(protocol == "https") {
			port = 443;
		}
		else {
			port = 80;
		}
	}
	if(listener != null) {
		listener.onStatus("Connecting to server `" .. address .. ":" .. String.forInteger(port) .. "' ..");
	}
	openSocket = TCPSocket.createAndConnect(address, port);
	if(listener != null) {
		listener.onStatus(null);
	}
	if(openSocket == null) {
		if(listener != null) {
			listener.onError("Connection failed: `" .. address .. ":" .. String.forInteger(port) .. "'");
		}
		return(false);
	}
	if(protocol == "https") {
		openSocket = SSLSocket.forClient(openSocket, address, null, acceptInvalidCertificate);
		if(openSocket == null && listener != null) {
			listener.onError("FAILED to create SSL socket for HTTPS");
			closeConnection(listener);
			return(false);
		}
	}
	openSocketProtocol = protocol;
	openSocketAddress = address;
	openSocketPort = port;
	parser = new MyResponseParser();
	return(true);
}

func openConnection(request as HTTPClientRequest, listener as HTTPClientListener) as bool
{
	if(request == null) {
		if(listener != null) {
			listener.onError("No request");
		}
		return(false);
	}
	return(openConnection(request.getProtocol(), request.getServerAddress(), request.getServerPort(), listener));
}

func closeConnection(listener as HTTPClientListener)
{
	if(openSocket == null) {
		return;
	}
	if(listener != null) {
		listener.onStatus("Closing connection");
	}
	openSocket.close();
	openSocket = null;
	openSocketProtocol = null;
	openSocketAddress = null;
	openSocketPort = 0;
	parser = null;
	if(listener != null) {
		listener.onStatus(null);
	}
}

func sendRequest(request as HTTPClientRequest, listener as HTTPClientListener) as bool
{
	if(request == null) {
		if(listener != null) {
			listener.onError("No request");
		}
		return(false);
	}
	if(listener != null && listener.onStartRequest(request) == false) {
		return(false);
	}
	if(openSocket != null) {
		if(request.getServerAddress() != openSocketAddress || request.getProtocol() != openSocketProtocol || request.getServerPort() != openSocketPort) {
			closeConnection(listener);
		}
	}
	if(openSocket == null) {
		openConnection(request, listener);
		if(openSocket == null) {
			return(false);
		}
	}
	if(listener != null) {
		listener.onStatus("Sending request headers ..");
	}
	var rqs = request.toString(defaultUserAgent);
	var pww = PrintWriterWrapper.forWriter(openSocket);
	var whr = pww.print(rqs);
	if(listener != null) {
		listener.onStatus(null);
	}
	if(whr == false) {
		if(listener != null) {
			listener.onError("Failed to send HTTP request headers");
		}
		closeConnection(listener);
		return(false);
	}
	var body = request.getBody();
	if(body != null) {
		if(listener != null) {
			listener.onStatus("Sending request body ..");
		}
		var rv = true;
		var bf = MALLOC(4096 * 4);
		while(true) {
			var r = body.read(bf);
			if(r < 1) {
				break;
			}
			if(openSocket.write(bf, r) < r) {
				if(listener != null) {
					listener.onError("Failed to send request body");
				}
				closeConnection(listener);
				rv = false;
				break;
			}
		}
		if(listener != null) {
			listener.onStatus(null);
		}
		if(rv == false) {
			return(false);
		}
	}
	return(true);
}

func readResponse(listener as HTTPClientListener, timeout as int) as bool
{
	if(openSocket == null) {
		if(listener != null) {
			listener.onError("No open socket");
		}
		return(false);
	}
	if(listener != null) {
		listener.onStatus("Receiving response ..");
	}
	var rv = true;
	parser.setListener(listener);
	while(true) {
		var r as int;
		if(openSocket is SSLSocket) {
			r = (openSocket as! SSLSocket).readWithTimeout(receiveBuffer, timeout);
		}
		else {
			r = (openSocket as! TCPSocket).readWithTimeout(receiveBuffer, timeout);
		}
		if(r == 0) {
			rv = false;
			break;
		}
		if(r < 1) { // socket closed
			closeConnection(listener);
			if(listener != null) {
				listener.onAborted();
			}
			rv = false;
			break;
		}
		parser.onDataReceived(receiveBuffer, r);
		if(parser.getAborted()) {
			closeConnection(listener);
			rv = false;
			break;
		}
		if(parser.getEndOfResponse()) {
			parser.reset();
			rv = true;
			break;
		}
	}
	if(parser != null) {
		parser.setListener(null);
	}
	if(listener != null) {
		listener.onStatus(null);
		if(listener.onEndRequest() == false) {
			rv = false;
		}
	}
	return(rv);
}

func executeRequest(request as HTTPClientRequest, listener as HTTPClientListener) override
{
	if(sendRequest(request, listener) == false) {
		return;
	}
	if(readResponse(listener, 30000) == false) {
		return;
	}
	if(request.getHeader("connection") == "close") {
		closeConnection(listener);
	}
}
