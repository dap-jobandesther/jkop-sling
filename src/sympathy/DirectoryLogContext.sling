
/*
 * This file is part of Jkop
 * Copyright (c) 2016 Job and Esther Technologies, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

class is LoggingContext imports cape:

func create(logDir as File, logIdPrefix as string = null, logDebug as bool = true) static as this
{
	var v = new this()
	v.setLogDir(logDir)
	v.setLogDebug(logDebug)
	if(String.isEmpty(logIdPrefix) == false) {
		v.setLogIdPrefix(logIdPrefix)
	}
	return(v);
}

prop logDebug = true
prop logDir as File
prop logIdPrefix = "messages"
var os as PrintWriter
var currentLogIdName as string

func logError(text as string)
{
	message("ERROR", text)
}

func logWarning(text as string)
{
	message("WARNING", text)
}

func logInfo(text as string)
{
	message("INFO", text)
}

func logDebug(text as string)
{
	message("DEBUG", text)
}

func message(type as string, text as string)
{
	if(logDebug == false && String.equalsIgnoreCase("debug", type)) {
		return
	}
	var dt = DateTime.forNow()
	var logTime as string
	if(dt != null) {
		logTime = String.forInteger(dt.getYear()) .. "-" ..
			String.forIntegerWithPadding(dt.getMonth(), 2) .. "-" ..
			String.forIntegerWithPadding(dt.getDayOfMonth(), 2) .. " " ..
			String.forIntegerWithPadding(dt.getHours(), 2) .. ":" ..
			String.forIntegerWithPadding(dt.getMinutes(), 2) .. ":" ..
			String.forIntegerWithPadding(dt.getSeconds(), 2) .. " UTC"
	}
	else {
		logTime = "DATE/TIME"
	}
	var logLine = "[" .. type .. "]-[" .. logTime .. "]: " .. text
	if(logDir != null) {
		var logIdName as string
		if(dt != null) {
			logIdName = logIdPrefix .. "_" .. String.forInteger(dt.getYear()) .. String.forIntegerWithPadding(dt.getMonth(), 2) .. String.forIntegerWithPadding(dt.getDayOfMonth(), 2) .. ".log"
		}
		else {
			logIdName = logIdPrefix .. ".log"
		}
		if(os == null || currentLogIdName != logIdName) {
			currentLogIdName = logIdName
			os = PrintWriterWrapper.forWriter(logDir.entry(currentLogIdName).append())
			if(os == null && logDir.isDirectory() == false) {
				logDir.createDirectoryRecursive()
				os = PrintWriterWrapper.forWriter(logDir.entry(currentLogIdName).append())
			}
		}
		if(os != null) {
			if(os.println(logLine) == false) {
				return
			}
			if(os is FlushableWriter) {
				(os as! FlushableWriter).flush()
			}
		}
	}
}

dtor
{
	if(os != null) {
		if(os is Closable) {
			(os as! Closable).close()
		}
		os = null
	}
}
