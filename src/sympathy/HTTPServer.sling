
/*
 * This file is part of Jkop
 * Copyright (c) 2016 Job and Esther Technologies, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

class is HTTPServerBase imports cape:

prop createOptionsResponseHandler as function<HTTPServerResponse,HTTPServerRequest>;
var requestHandlerListenerFunctions as vector<function<void,HTTPServerRequest,HTTPServerResponse,int,string>>;
var requestHandlerListenerObjects as vector<HTTPServerRequestHandlerListener>;
var handlerStack as HTTPServerRequestHandlerStack;

ctor
{
	handlerStack = new HTTPServerRequestHandlerStack();
}

func initialize override as bool
{
	if(base.initialize() == false) {
		return(false);
	}
	handlerStack.initialize(this);
	foreach(listener in requestHandlerListenerObjects) {
		if(listener is HTTPServerComponent) {
			(listener as! HTTPServerComponent).initialize(this);
		}
	}
	return(true);
}

func onRefresh override
{
	base.onRefresh();
	handlerStack.onRefresh();
	foreach(listener in requestHandlerListenerObjects) {
		if(listener is HTTPServerComponent) {
			(listener as! HTTPServerComponent).onRefresh();
		}
	}
}

func onMaintenance override
{
	base.onMaintenance();
	handlerStack.onMaintenance();
	foreach(listener in requestHandlerListenerObjects) {
		if(listener is HTTPServerComponent) {
			(listener as! HTTPServerComponent).onMaintenance();
		}
	}
}

func cleanup override
{
	base.cleanup();
	handlerStack.cleanup();
	foreach(listener in requestHandlerListenerObjects) {
		if(listener is HTTPServerComponent) {
			(listener as! HTTPServerComponent).cleanup();
		}
	}
}

func pushRequestHandler(handler as function<void,HTTPServerRequest,function>)
{
	handlerStack.pushRequestHandler(handler);
}

func pushRequestHandler(handler as HTTPServerRequestHandler)
{
	handlerStack.pushRequestHandler(handler);
}

func addRequestHandlerListener(handler as function<void,HTTPServerRequest,HTTPServerResponse,int,string>)
{
	if(requestHandlerListenerFunctions == null) {
		requestHandlerListenerFunctions = new vector<function<void,HTTPServerRequest,HTTPServerResponse,int,string>>;
	}
	requestHandlerListenerFunctions += handler;
}

func addRequestHandlerListener(handler as HTTPServerRequestHandlerListener)
{
	if(requestHandlerListenerObjects == null) {
		requestHandlerListenerObjects = new vector<HTTPServerRequestHandlerListener>;
	}
	requestHandlerListenerObjects += handler;
	if(handler is HTTPServerComponent && isInitialized()) {
		(handler as! HTTPServerComponent).initialize(this);
	}
}

func createOptionsResponse(req as HTTPServerRequest) override as HTTPServerResponse
{
	if(createOptionsResponseHandler != null) {
		return(createOptionsResponseHandler(req));
	}
	return(base.createOptionsResponse(req));
}

func onRequest(req as HTTPServerRequest) override
{
	handlerStack.handleRequest(req as HTTPServerRequest, func() {
		req.sendResponse(HTTPServerResponse.forHTTPNotFound());
	});
}

func onRequestComplete(request as HTTPServerRequest, resp as HTTPServerResponse, bytesSent as int, remoteAddress as string) override
{
	base.onRequestComplete(request, resp, bytesSent, remoteAddress);
	foreach(handler in requestHandlerListenerFunctions) {
		handler(request, resp, bytesSent, remoteAddress);
	}
	foreach(handler in requestHandlerListenerObjects) {
		handler.onRequestHandled(request, resp, bytesSent, remoteAddress);
	}
}
