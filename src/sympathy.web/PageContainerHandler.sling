
/*
 * This file is part of Jkop
 * Copyright (c) 2016 Job and Esther Technologies, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

class is HTTPServerRequestHandlerAdapter imports cape imports capex imports sympathy:

prop defaultPage as string
prop pageContainer as PageContainer
prop templateStorage as TemplateStorage
prop country as string
prop languages as vector<string>
prop siteData as DynamicMap

ctor
{
	defaultPage = "index"
}

func setLocale(country as string, languages as array<string> = null)
{
	this.country = country
	this.languages = new vector<string>
	if(languages == null) {
		if(country == null) {
		}
		else if(country == "ph") {
			this.languages += "en_PH"
			this.languages += "en"
		}
		else if(country == "sg") {
			this.languages += "en_SG"
			this.languages += "en"
		}
		else if(country == "us") {
			this.languages += "en_US"
			this.languages += "en"
		}
		else if(country == "uk") {
			this.languages += "en_UK"
			this.languages += "en"
		}
		else if(country == "au") {
			this.languages += "en_AU"
			this.languages += "en"
		}
		else {
			this.languages += country
		}
	}
	else {
		foreach(language in languages) {
			this.languages += language
		}
	}
}

func onGET(req as HTTPServerRequest, next as function) override
{
	if(pageContainer == null) {
		next()
		return
	}
	var pageId = req.popResource()
	if(String.isEmpty(pageId)) {
		pageId = defaultPage
	}
	if(String.isEmpty(pageId)) {
		next()
		return
	}
	if(req.hasMoreResources()) {
		req.unpopResource()
		// FIXME: Handle attachments
		next()
		return
	}
	pageContainer.getPageData(pageId, func(type as string, data as DynamicMap, attachments as DynamicVector) {
		if(data == null) {
			next()
			return
		}
		var rdata = new DynamicMap()
		rdata.set("country", country)
		rdata.set("type", type)
		rdata.set("content", data)
		rdata.set("attachments", attachments)
		rdata.set("site", siteData)
		if(String.isEmpty(type)) {
			req.sendJSONObject(rdata)
			return
		}
		templateStorage.getTemplate(type, func(template as string) {
			if(template == null) {
				req.sendJSONObject(rdata)
				return
			}
			sendCompleteResponse(req, rdata, template)
		})
	})
}

func sendCompleteResponse(req as HTTPServerRequest, data as DynamicMap, tt as string)
{
	var includeDirs = new vector<File>
	var tsf = templateStorage as TemplateStorageUsingFiles
	if(tsf != null) {
		includeDirs += tsf.getDirectory()
	}
	var template = TextTemplate.forHTMLString(tt, includeDirs)
	if(template == null) {
		req.sendInternalError("Text template parsing")
		return
	}
	template.setLanguagePreferences(languages);
	var str = template.execute(data, includeDirs)
	if(str == null) {
		req.sendInternalError("Text template execution")
		return
	}
	req.sendHTMLString(str)
}
