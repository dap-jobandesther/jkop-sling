
/*
 * This file is part of Jkop
 * Copyright (c) 2016 Job and Esther Technologies, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

class is HTTPServerRequestHandlerAdapter imports cape imports capex imports sympathy:

prop db as SQLDatabase;

func onPOST(req as HTTPServerRequest) override as bool
{
	var tableName = req.popResource();
	if(tableName == null) {
		req.sendInternalError("Creating tables: Not implemented");
		return(true);
	}
	if(req.hasMoreResources()) {
		req.sendInvalidRequest();
		return(true);
	}
	var data = req.getBodyJSONMap();
	if(data == null) {
		req.sendInvalidRequest();
		return(true);
	}
	db.execute(db.prepareInsertStatement(tableName, data), func(status as bool) {
		if(status == false) {
			req.sendInternalError();
		}
		else {
			req.sendJSONObject(JSONResponse.forOk());
		}
	});
	return(true);
}

func onGET(req as HTTPServerRequest) override as bool
{
	var tableName = req.popResource();
	if(tableName == null) {
		db.queryAllTableNames(func(data as vector) {
			if(data == null) {
				req.sendNotFound();
			}
			else {
				req.sendJSONObject(data);
			}
		});
		return(true);
	}
	if(req.hasMoreResources()) {
		req.sendInvalidRequest();
		return(true);
	}
	db.query(db.prepareQueryAllStatement(tableName), func(data as SQLResultSetIterator) {
		if(data == null) {
			req.sendNotFound();
		}
		else {
			req.sendJSONObject(data.toVector());
		}
	});
	return(true);
}
