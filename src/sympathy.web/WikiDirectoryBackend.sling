
/*
 * This file is part of Jkop
 * Copyright (c) 2016 Job and Esther Technologies, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

class is WikiBackend imports cape:

func forDirectory(dir as File) static as this
{
	var v = new this();
	v.setDirectory(dir);
	return(v);
}

prop logContext as LoggingContext;
prop directory as File;
prop themeDirectory as File;
var cache as map<string,WikiDirectoryDocument>;

ctor
{
	cache = new map<string,WikiDirectoryDocument>;
}

func clearCache
{
	if(directory != null) {
		Log.debug(logContext, "Clearing the memory cache for directory `" .. directory.getPath() .. "'");
	}
	Map.clear(cache);
}

func processPath(path as string) private as vector<string>
{
	if(path == null) {
		return(null);
	}
	var v = new vector<string>;
	var comps = String.split(path, '/');
	foreach(comp in comps) {
		if(String.isEmpty(comp)) {
			;
		}
		else if(comp == ".") {
			;
		}
		else if(comp == "..") {
			Vector.removeLast(v);
		}
		else {
			v += comp;
		}
	}
	return(v);
}

func getResourceForPath(path as string) as File
{
	if(directory == null || path == null) {
		return(null);
	}
	var pp = processPath(path);
	if(Vector.isEmpty(pp)) {
		return(null);
	}
	var ff = directory;
	foreach(p in pp) {
		ff = ff.entry(p);
	}
	if(ff.isFile() == false) {
		return(null);
	}
	return(ff);
}

func getDocumentForPath(path as string) as WikiDocument
{
	if(path == null) {
		return(null);
	}
	var pp = processPath(path);
	var pps as string;
	if(Vector.isEmpty(pp)) {
		pps = "/";
	}
	else {
		pps = "/" .. String.combine(pp, '/');
	}
	var doc = Map.get(cache, pps);
	if(doc != null) {
		if(doc.isUpToDate()) {
			return(doc);
		}
		Map.remove(cache, pps);
	}
	if(directory == null) {
		return(null);
	}
	var ff = directory;
	foreach(p in pp) {
		ff = ff.entry(p);
	}
	if(ff.isDirectory() == false) {
		return(null);
	}
	var v = WikiDirectoryDocument.forDirectory(ff, themeDirectory, this);
	if(v == null) {
		return(null);
	}
	v.setPath(pps);
	Map.set(cache, pps, v);
	return(v);
}
