
/*
 * This file is part of Jkop
 * Copyright (c) 2016 Job and Esther Technologies, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

class is HTTPServerRequestHandlerAdapter imports cape imports capex imports sympathy:

func forDatabase(database as SQLDatabase, articleTable as string) static as this
{
	var v = new this()
	v.setDatabase(database)
	v.setArticleTable(articleTable)
	return(v)
}

prop database as SQLDatabase
prop articleTable as string
prop articlesPerPage = 10
prop templateStorage as TemplateStorage
prop siteData as DynamicMap
prop templatePrefix as string
prop country as string
prop languages as vector<string>

ctor
{
	articleTable = "articles"
	templatePrefix = ""
}

func initialize(server as HTTPServerBase) override
{
	base.initialize(server)
	if(database != null || articleTable != null) {
		database.ensureTableExists(Article.SQL.getTableInfo(articleTable))
	}
}

func isResponseHTML(req as HTTPServerRequest) as bool
{
	if(templateStorage == null) {
		return(false)
	}
	if(req.getQueryParameter("format") == "json") {
		return(false)
	}
	return(true)
}

func vectorForIterator(iterator as DynamicIterator) private as vector<object>
{
	if(iterator == null) {
		return(null)
	}
	var v = new vector<object>;
	loop {
		var o = iterator.nextString()
		if(o == null) {
			break
		}
		v += o
	}
	return(v)
}

func vectorForIterator(iterator as Iterator<Article>) private as vector<object>
{
	if(iterator == null) {
		return(null)
	}
	var v = new vector<object>;
	loop {
		var o = iterator.next()
		if(o == null) {
			break
		}
		var m = new DynamicMap()
		o.exportData(m)
		v += m
	}
	return(v)
}

func onGETCategoryList(req as HTTPServerRequest, next as function)
{
	Article.SQL.queryAllUniqueCategoryValues(database, articleTable, func(results as DynamicIterator) {
		if(results == null) {
			sendResponse(req, "error", JSONResponse.forErrorCode("query_failed"))
			return
		}
		var data = new DynamicMap()
		data.set("categories", vectorForIterator(results))
		sendResponse(req, "categorylist", data)
	})
}

func onGETCategoryArticles(req as HTTPServerRequest, catId as string, next as function)
{
	var pp = 0
	var spage = req.getQueryParameter("page")
	if(spage != null) {
		pp = String.toInteger(spage) - 1
	}
	if(pp < 0) {
		pp = 0
	}
	Article.SQL.queryCountForCategory(database, articleTable, catId, func(count as int) {
		var pages = count /  articlesPerPage;
		if(count % articlesPerPage > 0) {
			pages ++;
		}
		if(pages < 1) {
			pages = 1;
		}
		var orderBy = [ SQLOrderingRule.forDescending("timeStamp") ]
		Article.SQL.queryByCategory(database, articleTable, catId, pp * articlesPerPage, articlesPerPage, orderBy, func(results as Iterator<Article>) {
			if(results == null) {
				sendResponse(req, "error", JSONResponse.forErrorCode("query_failed"))
			}
			else {
				var data = new DynamicMap()
				data.set("articles", vectorForIterator(results))
				data.set("category", catId)
				if(pp > 0) {
					data.set("previousPage", pp)
				}
				if(pp+2 <= pages) {
					data.set("nextPage", pp+2)
				}
				data.set("currentPage", pp+1)
				data.set("pageCount", pages)
				sendResponse(req, "articlelist", data)
			}
		})
	})
}

func onGETAllArticles(req as HTTPServerRequest, next as function)
{
	var pp = 0
	var spage = req.getQueryParameter("page")
	if(spage != null) {
		pp = String.toInteger(spage) - 1
	}
	if(pp < 0) {
		pp = 0
	}
	Article.SQL.queryRecordCount(database, articleTable, func(count as int) {
		var pages = count /  articlesPerPage;
		if(count % articlesPerPage > 0) {
			pages ++;
		}
		if(pages < 1) {
			pages = 1;
		}
		var orderBy = [ SQLOrderingRule.forDescending("timeStamp") ]
		Article.SQL.queryPartial(database, articleTable, pp * articlesPerPage, articlesPerPage, orderBy, func(results as Iterator<Article>) {
			if(results == null) {
				sendResponse(req, "error", JSONResponse.forErrorCode("query_failed"))
			}
			else {
				var data = new DynamicMap()
				data.set("articles", vectorForIterator(results))
				if(pp > 0) {
					data.set("previousPage", pp)
				}
				if(pp+2 <= pages) {
					data.set("nextPage", pp+2)
				}
				data.set("currentPage", pp+1)
				data.set("pageCount", pages)
				sendResponse(req, "articlelist", data)
			}
		})
	})
}

func onGETArticle(req as HTTPServerRequest, pageId as string, next as function)
{
	Article.SQL.queryByName(database, articleTable, pageId, func(article as Article) {
		if(article == null) {
			req.unpopResource()
			next()
			return
		}
		else {
			var adata = new DynamicMap()
			article.exportData(adata)
			sendResponse(req, "article", adata)
		}
	})
}

func sendResponse(req as HTTPServerRequest, type as string, content as object)
{
	var rdata = new DynamicMap()
	if(String.isEmpty(country) == false) {
		rdata.set("country", country)
	}
	rdata.set("type", type)
	rdata.set("content", content)
	if(isResponseHTML(req)) {
		var templateName = templatePrefix .. type
		templateStorage.getTemplate(templateName, func(template as string) {
			if(template == null) {
				req.sendJSONObject(rdata)
			}
			else {
				// rdata.set("attachments", null) // FIXME
				rdata.set("site", siteData)
				sendHTMLResponse(req, rdata, template)
			}
		})
	}
	else {
		req.sendJSONObject(rdata)
	}
}

func sendHTMLResponse(req as HTTPServerRequest, data as DynamicMap, tt as string)
{
	var includeDirs = new vector<File>
	var tsf = templateStorage as TemplateStorageUsingFiles
	if(tsf != null) {
		includeDirs += tsf.getDirectory()
	}
	var template = TextTemplate.forHTMLString(tt, includeDirs)
	if(template == null) {
		req.sendInternalError("Text template parsing")
		return
	}
	template.setLanguagePreferences(languages);
	var str = template.execute(data, includeDirs)
	if(str == null) {
		req.sendInternalError("Text template execution")
		return
	}
	req.sendHTMLString(str)
}

func onGET(req as HTTPServerRequest, next as function) override
{
	if(database == null || articleTable == null) {
		next()
		return
	}
	if(req.hasMoreResources() == false) {
		if(req.isForDirectory() == false) {
			req.sendRedirectAsDirectory()
			return
		}
		onGETAllArticles(req, next)
		return
	}
	if(req.acceptResource("articles")) {
		var pageId = req.popResource()
		if(String.isEmpty(pageId)) {
			req.sendRedirect("../")
			return
		}
		if(req.hasMoreResources()) {
			// FIXME: When we implement per-article resources (attachments),
			// we can capture them here
			next()
			return
		}
		if(req.isForDirectory() == false) {
			req.sendRedirectAsDirectory()
			return
		}
		onGETArticle(req, pageId, next)
		return
	}
	if(req.acceptResource("categories")) {
		if(req.isForDirectory() == false) {
			req.sendRedirectAsDirectory()
			return
		}
		var catId = req.popResource()
		if(String.isEmpty(catId)) {
			onGETCategoryList(req, next)
			return
		}
		if(req.hasMoreResources()) {
			next()
			return
		}
		onGETCategoryArticles(req, catId, next)
		return
	}
	next()
}
