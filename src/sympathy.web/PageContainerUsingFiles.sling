
/*
 * This file is part of Jkop
 * Copyright (c) 2016 Job and Esther Technologies, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

class is PageContainer imports cape:

func forDirectory(dir as File) static as this
{
	var v = new this()
	v.setDirectory(dir)
	return(v)
}

prop directory as File

func getAllPageIds(callback as function<void,DynamicVector>)
{
	if(callback == null) {
		return
	}
	var v = new DynamicVector()
	if(directory != null) {
		var it = directory.entries()
		while(it != null) {
			var file = it.next()
			if(file == null) {
				break
			}
			if(file.isDirectory()) {
				v.append(file)
			}
		}
	}
	callback(v)
}

func getPageData(pageId as string, callback as function<void,string,DynamicMap,DynamicVector>)
{
	if(callback == null) {
		return
	}
	if(directory == null || String.isEmpty(pageId) || pageId == ".." || pageId == "." || String.indexOf(pageId, '/') >= 0) {
		callback(null,null,null)
		return
	}
	var cdir = directory.entry(pageId)
	if(cdir.isDirectory() == false) {
		callback(null,null,null)
		return
	}
	var type = String.strip(cdir.entry("type.txt").getContentsString("UTF-8"))
	var dataString = cdir.entry("content.json").getContentsString("UTF-8")
	if(dataString == null) {
		callback(null,null,null)
		return
	}
	var data = JSONParser.parse(dataString) as DynamicMap
	if(data == null) {
		callback(null,null,null)
		return
	}
	// FIXME: Attachments
	callback(type, data, null)
}

func createPage(pageId as string, type as string, callback as function<void,bool>) stub
func changePageType(pageId as string, type as string, callback as function<void,bool>) stub
func deletePage(pageId as string, callback as function<void,bool>) stub
func updatePageContent(pageId as string, content as DynamicMap, callback as function<void,bool>) stub
func addAttachment(pageId as string, fileName as string, content as buffer, callback as function<void,bool>) stub
func replaceAttachment(pageId as string, fileName as string, content as buffer, callback as function<void,bool>) stub
func getAttachment(pageId as string, fileName as string, callback as function<void,buffer>) stub
func deleteAttachment(pageId as string, fileName as string, callback as function<void,bool>) stub
func deleteAllAttachments(pageId as string, callback as function<void,bool>) stub

/*
class ContentEntry
{
	var templateNameFile public as File
	var dataFile public as File
}

func getContentEntry(id as string) as ContentEntry
{
	if(directory == null || String.isEmpty(id)) {
		return(null)
	}
	var dd = directory
	foreach(comp in String.split(id, '/')) {
		if(String.isEmpty(comp)) {
		}
		else if(comp == ".") {
		}
		else if(comp == "..") {
			if(dd.isSame(directory) == false) {
				dd = dd.getParent()
			}
		}
		else {
			dd = dd.entry(comp)
		}
	}
	if(dd.isSame(directory)) {
		return(null)
	}
	var name = dd.baseName()
	dd = dd.getParent()
	if(String.isEmpty(name) || dd.isDirectory() == false) {
		return(null)
	}
	var v = new ContentEntry()
	v.templateNameFile = dd.entry(name .. ".template")
	v.dataFile = dd.entry(name .. ".json")
	return(v)
}

func getContent(id as string, callback as function<void,CMSContent>)
{
	if(callback == null) {
		return
	}
	var entry = getContentEntry(id)
	if(entry == null) {
		callback(null)
		return
	}
	var dataString = entry.dataFile.getContentsString("UTF-8")
	var data as DynamicMap
	if(dataString != null) {
		data = JSONParser.parse(dataString) as DynamicMap
	}
	if(data == null) {
		callback(null)
		return
	}
	var templateName = String.strip(entry.templateNameFile.getContentsString("UTF-8"))
	var v = new CMSContent()
	v.setTemplateName(templateName)
	v.setData(data)
	callback(v)
}

func getContentList(callback as function<void,vector<string>>)
{
	if(callback == null) {
		return
	}
	if(directory == null) {
		callback(null)
		return
	}
	var dirbn = directory.getPath()
	var dirbnlen = String.getLength(dirbn)
	var v = new vector<string>
	var it = cape.FileFinder.forRoot(directory);
	it.addPattern("*.json");
	loop {
		var file = it.next();
		if(file == null) {
			break;
		}
		var filebn = file.getPath()
		if(String.startsWith(filebn, dirbn)) {
			var filebnlen = String.getLength(filebn)
			v += String.getSubString(filebn, dirbnlen, filebnlen - dirbnlen - 5)
		}
	}
	callback(v)
}

func deleteContent(id as string, callback as function<void,bool>)
{
	var entry = getContentEntry(id)
	if(entry == null) {
		callback(false)
		return
	}
	entry.templateNameFile.remove()
	entry.dataFile.remove()
	if(callback != null) {
		if(entry.templateNameFile.exists() || entry.dataFile.exists()) {
			callback(false);
		}
		else {
			callback(true);
		}
	}
}

func saveContent(id as string, content as CMSContent, callback as function<void,bool>)
{
	if(String.isEmpty(id) || content == null) {
		if(callback != null) {
			callback(false);
		}
		return
	}
	var entry = getContentEntry(id)
	if(entry == null) {
		callback(false)
		return
	}
}
*/