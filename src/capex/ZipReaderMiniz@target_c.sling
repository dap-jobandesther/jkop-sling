
/*
 * This file is part of Jkop
 * Copyright (c) 2016 Job and Esther Technologies, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

class is ZipReader:

lang "c" {{{
	#define MINIZ_HEADER_FILE_ONLY
	#include "ZipReaderMiniz.inc.c"
}}}

prop file as File
prop zip as ptr

dtor
{
	close()
}

func initialize as this
{
	if(file == null) {
		return(null)
	}
	var fp = file.get_native_path()
	if(String.is_empty(fp)) {
		return(null)
	}
	var fps = fp.to_strptr()
	if(fps == null) {
		return(null)
	}
	var zp as ptr
	lang "c" {{{
		mz_zip_archive* zipp = (mz_zip_archive*)malloc(sizeof(mz_zip_archive));
		zp = zipp;
	}}}
	if(zp == null) {
		return(null)
	}
	var err = false
	lang "c" {{{
		memset(zipp, 0, sizeof(mz_zip_archive));
		if(mz_zip_reader_init_file(zipp, fps, 0) == MZ_FALSE) {
			err = MZ_TRUE;
		}
	}}}
	if(err) {
		lang "c" {{{
			free(zipp);
		}}}
		return(null)
	}
	this.zip = zp
	return(this)
}

func close as bool
{
	var zp = zip
	if(zp == null) {
		return(true)
	}
	this.zip = null
	var err = false
	lang "c" {{{
		if(mz_zip_reader_end((mz_zip_archive*)zp) == MZ_FALSE) {
			err = MZ_TRUE;
		}
		free(zp);
	}}}
	return(!err)
}

class MyZipReaderEntry is ZipReaderEntry
{
	prop reader as MinizReader
	prop index as int

	func writeToFile(file as File) override as bool
	{
		if(file == null) {
			return(false)
		}
		if(getIsDirectory()) {
			return(file.createDirectoryRecursive())
		}
		if(reader == null) {
			return(false)
		}
		var zp = reader.getZip()
		if(zp == null) {
			return(false)
		}
		var dstf = file.getPath()
		if(dstf == null) {
			return(false)
		}
		var v as bool
		var idx = index
		lang "c" {{{
			v = mz_zip_reader_extract_to_file((mz_zip_archive*)zp, idx, dstf, 0);
		}}}
		return(v)
	}
}

func getEntries as vector<ZipReaderEntry>
{
	var zp = zip
	if(zp == null) {
		return(null)
	}
	var c as int
	lang "c" {{{
		c = (int)mz_zip_reader_get_num_files((mz_zip_archive*)zp);
	}}}
	if(c < 1) {
		return(null)
	}
	var v = new vector<ZipReaderEntry>
	var n as int
	lang "c" {{{
		mz_zip_archive_file_stat stat;
	}}}
	for(n=0; n<c; n++) {
		var filename as ptr
		var compsize as int
		var uncompsize as int
		lang "c" {{{
			if(mz_zip_reader_file_stat((mz_zip_archive*)zp, n, &stat) == MZ_FALSE) {
				continue
			}
			filename = stat.m_filename
			compsize = stat.m_comp_size
			uncompsize = stat.m_uncomp_size
		}}}
		var e = new MyZipReaderEntry()
		e.setReader(this)
		e.setIndex(n)
		e.setName(filename)
		e.setCompressedSize(compsize)
		e.setUncompressedSize(uncompsize)
		v += e
	}
	return(v)
}
