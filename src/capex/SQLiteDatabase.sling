
/*
 * This file is part of Jkop
 * Copyright (c) 2016 Job and Esther Technologies, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

class is SQLDatabase abstract imports cape:

func instance private static as this
{
	/*
	IFDEF("target_android") {
		return(new SQLiteDatabaseAndroid());
	}
	*/
	IFDEF("target_c") {
		return(new SQLiteDatabaseC());
	}
	ELSE IFDEF("target_monocs") {
		return(new SQLiteDatabaseMono());
	}
	ELSE {
		ERROR("Not implemented");
		return(null);
	}
}

func forFile(file as File, allowCreate as bool = true, logger as LoggingContext = null) static as this
{
	if(file == null) {
		return(null);
	}
	var v = instance();
	if(v == null) {
		return(null);
	}
	if(logger != null) {
		v.setLogger(logger);
	}
	if(file.isFile() == false) {
		if(allowCreate == false) {
			return(null);
		}
		var pp = file.getParent();
		if(pp.isDirectory() == false) {
			if(pp.createDirectoryRecursive() == false) {
				Log.error(v.getLogger() as LoggingContext, "Failed to create directory: " .. pp.getPath())
			}
		}
		if(v.initialize(file, true) == false) {
			v = null;
		}
	}
	else {
		if(v.initialize(file, false) == false) {
			v = null;
		}
	}
	return(v);
}

func getDatabaseTypeId override as string
{
	return("sqlite");
}

func initialize(file as File, create as bool) virtual as bool
{
	return(true);
}

func querySingleRow(stmt as SQLStatement) override as cape.DynamicMap
{
	var it = query(stmt);
	if(it == null) {
		return(null);
	}
	var v as cape.DynamicMap = it.next();
	return(v);
}

func tableExists(table as string) override as bool
{
	if(table == null) {
		return(false);
	}
	var stmt = prepare("SELECT name FROM sqlite_master WHERE type='table' AND name=?;");
	if(stmt == null) {
		return(false);
	}
	stmt.addParamString(table);
	var sr = querySingleRow(stmt);
	if(sr == null) {
		return(false);
	}
	if(String.equals(table, sr.getString("name")) == false) {
		return(false);
	}
	return(true);
}

func queryAllTableNames(callback as function<void, vector>) override
{
	var v = queryAllTableNames();
	if(callback != null) {
		callback(v);
	}
}

func queryAllTableNames override as vector
{
	var stmt = prepare("SELECT name FROM sqlite_master WHERE type='table';");
	if(stmt == null) {
		return(null);
	}
	var it = query(stmt);
	if(it == null) {
		return(null);
	}
	var v = new vector;
	loop
	{
		var o = it.next();
		if(o == null) {
			break;
		}
		var name = o.getString("name");
		if(String.isEmpty(name) == false) {
			v += name;
		}
	}
	return(v);
}

func columnToCreateString(cc as SQLTableColumnInfo) virtual as string
{
	var sb = new StringBuilder();
	sb.append(cc.getName());
	sb.append(' ');
	var tt = cc.getType();
	if(tt == SQLTableColumnInfo.TYPE_INTEGER_KEY) {
		sb.append("INTEGER PRIMARY KEY AUTOINCREMENT")
	}
	else if(tt == SQLTableColumnInfo.TYPE_STRING_KEY) {
		sb.append("TEXT PRIMARY KEY")
	}
	else if(tt == SQLTableColumnInfo.TYPE_INTEGER) {
		sb.append("INTEGER")
	}
	else if(tt == SQLTableColumnInfo.TYPE_STRING) {
		sb.append("VARCHAR(255)")
	}
	else if(tt == SQLTableColumnInfo.TYPE_TEXT) {
		sb.append("TEXT")
	}
	else if(tt == SQLTableColumnInfo.TYPE_BLOB) {
		sb.append("BLOB")
	}
	else if(tt == SQLTableColumnInfo.TYPE_DOUBLE) {
		sb.append("REAL")
	}
	else {
		Log.error(getLogger(), "Unknown column type: " .. String.forInteger(tt))
		sb.append("UNKNOWN")
	}
	return(sb.toString())
}

func prepareCreateTableStatement(table as string, columns as vector<SQLTableColumnInfo>) override as SQLStatement
{
	if(table == null || columns == null) {
		return(null);
	}
	var sb = new StringBuilder();
	sb.append("CREATE TABLE ");
	sb.append(table);
	sb.append(" (");
	var first = true;
	foreach(column as SQLTableColumnInfo in columns) {
		if(first == false) {
			sb.append(',');
		}
		sb.append(' ');
		sb.append(columnToCreateString(column));
		first = false;
	}
	sb.append(" );");
	return(prepare(sb.toString()));
}

func prepareDeleteTableStatement(table as string) override as SQLStatement
{
	if(table == null) {
		return(null);
	}
	var sb = new StringBuilder();
	sb.append("DROP TABLE ");
	sb.append(table);
	sb.append(";");
	return(prepare(sb.toString()));
}

func prepareCreateIndexStatement(table as string, column as string, unique as bool) override as SQLStatement
{
	if(table == null || column == null) {
		return(null);
	}
	var unq = "";
	if(unique) {
		unq = "UNIQUE ";
	}
	var sql = "CREATE " .. unq .. "INDEX " .. table .. "_" .. column .. " ON " .. table .. " (" .. column .. ")";
	return(prepare(sql));
}
