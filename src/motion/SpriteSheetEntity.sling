
/*
 * This file is part of Jkop
 * Copyright (c) 2016 Job and Esther Technologies, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

class is SpriteEntity imports cave imports cape:

var sprite protected as Sprite
var imageSheet private as array<Texture>
var arraySize private as int
var currentFrame private = -1
var textureSprite private as TextureSprite
var delay private as long
var timeVal as TimeValue

func initialize override
{
	base.initialize()
	sprite = base.sprite
	textureSprite = sprite as TextureSprite
	timeVal = TimeValue.forSeconds(1)
}

func setImageSheet(imgs as vector<Image>) as bool
{
	if(imgs == null) {
		return(false)
	}
	currentFrame = -1
	imageSheet = new Texture[Vector.getSize(imgs)]
	var i = 0
	foreach(txt as Image in imgs) {
		imageSheet[i] = scene.createTextureForImage(txt)
		i++
	}
	arraySize = SIZE(imageSheet)
	return(true)
}

func setFramesPerSecond(fps as int)
{
	var v = 1000 / fps
	if(timeVal != null) {
		timeVal.setMicroSeconds(v*1000)
	}
	delay = v * 1000
}

func nextFrame as bool
{
	if(imageSheet == null || arraySize < 1) {
		sprite = null
		return(false)
	}
	currentFrame++
	if(currentFrame >= arraySize) {
		currentFrame = 0
	}
	if(textureSprite != null) {
		textureSprite.setTexture(imageSheet[currentFrame])
	}
	return(true)
}

func tick(gameTime as TimeValue, delta as double) override
{
	base.tick(gameTime, delta)
	if(timeVal != null) {
		var timeDiff = TimeValue.diff(gameTime, timeVal) % 1000000
		if(timeDiff >= delay) {
			timeVal.setMicroSeconds(gameTime.getMicroSeconds())
			nextFrame()
		}
	}
}