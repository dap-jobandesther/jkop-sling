
/*
 * This file is part of Jkop
 * Copyright (c) 2016 Job and Esther Technologies, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

matchfilter imports ast imports compiler imports cape imports sam.sling:

rule
{
	match {
		var sceneDecl = node as ClassDeclarationNode
		if(sceneDecl == null) {
			return(false)
		}
		if(CustomModifierNode.exists_in(ctx, sceneDecl, "mainScene") == false) {
			return(false)
		}
	}
	process(sceneDecl) {
		var parent = sceneDecl.getParent(ctx) as NameSpaceNode
		if(parent == null) {
			ctx.error("Node parent is not a namespace", sceneDecl)
			return(false)
		}
		var className = sceneDecl.getNodeName(ctx)
		var sb = new StringBuilder()
		TEMPLATE("SceneActivityForAndroid.sling.t", sb)
		var code = sb.toString()
		var decls = SlingSourceInput.parseStringAsNameSpaceDeclarations(ctx, code, "SceneActivityForAndroid.sling.t")
		if(decls == null) {
			ctx.error("Failed to parse the generated Android code: SceneActivityForAndroid (compiler internal error)", sceneDecl)
			return(false)
		}
		foreach(node as NodeObject in decls.exportNodes(ctx)) {
			parent.addNode(ctx, node)
		}
		decls.destroy(ctx)
		CustomModifierNode.remove_from(ctx, sceneDecl, "mainScene")
		return(true);
	}
}
