
/*
 * This file is part of Jkop
 * Copyright (c) 2016 Job and Esther Technologies, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

class imports cape imports xnet:

func main(args as array<string>) as int #main
{
	if(SIZE(args) < 1) {
		PRINT("Not enough arguments");
		return(1);
	}
	var httpc = HTTPClient.createDefault();
	var req as HTTPClientRequest;
	var asz = SIZE(args);
	if(asz == 1) {
		req = HTTPClientRequest.forGET(args[0]);
	}
	else if(asz >= 3) {
		var ff = FileInstance.forPath(args[2]);
		if(ff.isFile() == false) {
			PRINT("Not a file: `" .. args[2] .. "'");
			return(1);
		}
		var reader = ff.read();
		if(reader == null) {
			PRINT("Failed to read: `" .. args[2] .. "'");
			return(1);
		}
		req = HTTPClientRequest.forPOST(args[0], args[1], reader);
		// NOTE: The following is the same thing as the above, except that
		// the one below reads the file contents in memory first, while the one above
		// streams the file directly from storage (using less memory).
		/*
		var buf = ff.getContentsBuffer();
		if(buf == null) {
			PRINT("Failed to read: `" .. args[2] .. "'");
			return(1);
		}
		req = HTTPClientRequest.forPOST(args[0], args[1], buf);
		*/
	}
	else {
		PRINT("Unknown parameters. Giving up.");
		return(1);
	}
	HTTPClient.execute(httpc, req, func(resp as HTTPClientResponse, data as buffer) {
		if(resp == null) {
			PRINT("HTTP Request Failed")
		}
		else {
			PRINT(resp.toString());
			if(SIZE(args) >= 4) {
				var of = FileInstance.forPath(args[3]);
				if(of.setContentsBuffer(data) == false) {
					PRINT("FAILED to write output file: " .. of.getPath());
				}
			}
		}
	});
	return(0);
}